
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Worker
 * 
 */
export type Worker = $Result.DefaultSelection<Prisma.$WorkerPayload>
/**
 * Model PassCode
 * 
 */
export type PassCode = $Result.DefaultSelection<Prisma.$PassCodePayload>
/**
 * Model Domain
 * 
 */
export type Domain = $Result.DefaultSelection<Prisma.$DomainPayload>
/**
 * Model SubDomain
 * 
 */
export type SubDomain = $Result.DefaultSelection<Prisma.$SubDomainPayload>
/**
 * Model Site
 * 
 */
export type Site = $Result.DefaultSelection<Prisma.$SitePayload>
/**
 * Model Log
 * 
 */
export type Log = $Result.DefaultSelection<Prisma.$LogPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Workers
 * const workers = await prisma.worker.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Workers
   * const workers = await prisma.worker.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.worker`: Exposes CRUD operations for the **Worker** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Workers
    * const workers = await prisma.worker.findMany()
    * ```
    */
  get worker(): Prisma.WorkerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.passCode`: Exposes CRUD operations for the **PassCode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PassCodes
    * const passCodes = await prisma.passCode.findMany()
    * ```
    */
  get passCode(): Prisma.PassCodeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.domain`: Exposes CRUD operations for the **Domain** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Domains
    * const domains = await prisma.domain.findMany()
    * ```
    */
  get domain(): Prisma.DomainDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.subDomain`: Exposes CRUD operations for the **SubDomain** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SubDomains
    * const subDomains = await prisma.subDomain.findMany()
    * ```
    */
  get subDomain(): Prisma.SubDomainDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.site`: Exposes CRUD operations for the **Site** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sites
    * const sites = await prisma.site.findMany()
    * ```
    */
  get site(): Prisma.SiteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.log`: Exposes CRUD operations for the **Log** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Logs
    * const logs = await prisma.log.findMany()
    * ```
    */
  get log(): Prisma.LogDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Worker: 'Worker',
    PassCode: 'PassCode',
    Domain: 'Domain',
    SubDomain: 'SubDomain',
    Site: 'Site',
    Log: 'Log'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "worker" | "passCode" | "domain" | "subDomain" | "site" | "log"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Worker: {
        payload: Prisma.$WorkerPayload<ExtArgs>
        fields: Prisma.WorkerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkerPayload>
          }
          findFirst: {
            args: Prisma.WorkerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkerPayload>
          }
          findMany: {
            args: Prisma.WorkerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkerPayload>[]
          }
          create: {
            args: Prisma.WorkerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkerPayload>
          }
          createMany: {
            args: Prisma.WorkerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkerPayload>[]
          }
          delete: {
            args: Prisma.WorkerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkerPayload>
          }
          update: {
            args: Prisma.WorkerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkerPayload>
          }
          deleteMany: {
            args: Prisma.WorkerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkerPayload>[]
          }
          upsert: {
            args: Prisma.WorkerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkerPayload>
          }
          aggregate: {
            args: Prisma.WorkerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorker>
          }
          groupBy: {
            args: Prisma.WorkerGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkerGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkerCountArgs<ExtArgs>
            result: $Utils.Optional<WorkerCountAggregateOutputType> | number
          }
        }
      }
      PassCode: {
        payload: Prisma.$PassCodePayload<ExtArgs>
        fields: Prisma.PassCodeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PassCodeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassCodePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PassCodeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassCodePayload>
          }
          findFirst: {
            args: Prisma.PassCodeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassCodePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PassCodeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassCodePayload>
          }
          findMany: {
            args: Prisma.PassCodeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassCodePayload>[]
          }
          create: {
            args: Prisma.PassCodeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassCodePayload>
          }
          createMany: {
            args: Prisma.PassCodeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PassCodeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassCodePayload>[]
          }
          delete: {
            args: Prisma.PassCodeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassCodePayload>
          }
          update: {
            args: Prisma.PassCodeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassCodePayload>
          }
          deleteMany: {
            args: Prisma.PassCodeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PassCodeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PassCodeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassCodePayload>[]
          }
          upsert: {
            args: Prisma.PassCodeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassCodePayload>
          }
          aggregate: {
            args: Prisma.PassCodeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePassCode>
          }
          groupBy: {
            args: Prisma.PassCodeGroupByArgs<ExtArgs>
            result: $Utils.Optional<PassCodeGroupByOutputType>[]
          }
          count: {
            args: Prisma.PassCodeCountArgs<ExtArgs>
            result: $Utils.Optional<PassCodeCountAggregateOutputType> | number
          }
        }
      }
      Domain: {
        payload: Prisma.$DomainPayload<ExtArgs>
        fields: Prisma.DomainFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DomainFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DomainPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DomainFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DomainPayload>
          }
          findFirst: {
            args: Prisma.DomainFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DomainPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DomainFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DomainPayload>
          }
          findMany: {
            args: Prisma.DomainFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DomainPayload>[]
          }
          create: {
            args: Prisma.DomainCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DomainPayload>
          }
          createMany: {
            args: Prisma.DomainCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DomainCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DomainPayload>[]
          }
          delete: {
            args: Prisma.DomainDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DomainPayload>
          }
          update: {
            args: Prisma.DomainUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DomainPayload>
          }
          deleteMany: {
            args: Prisma.DomainDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DomainUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DomainUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DomainPayload>[]
          }
          upsert: {
            args: Prisma.DomainUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DomainPayload>
          }
          aggregate: {
            args: Prisma.DomainAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDomain>
          }
          groupBy: {
            args: Prisma.DomainGroupByArgs<ExtArgs>
            result: $Utils.Optional<DomainGroupByOutputType>[]
          }
          count: {
            args: Prisma.DomainCountArgs<ExtArgs>
            result: $Utils.Optional<DomainCountAggregateOutputType> | number
          }
        }
      }
      SubDomain: {
        payload: Prisma.$SubDomainPayload<ExtArgs>
        fields: Prisma.SubDomainFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubDomainFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubDomainPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubDomainFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubDomainPayload>
          }
          findFirst: {
            args: Prisma.SubDomainFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubDomainPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubDomainFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubDomainPayload>
          }
          findMany: {
            args: Prisma.SubDomainFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubDomainPayload>[]
          }
          create: {
            args: Prisma.SubDomainCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubDomainPayload>
          }
          createMany: {
            args: Prisma.SubDomainCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubDomainCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubDomainPayload>[]
          }
          delete: {
            args: Prisma.SubDomainDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubDomainPayload>
          }
          update: {
            args: Prisma.SubDomainUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubDomainPayload>
          }
          deleteMany: {
            args: Prisma.SubDomainDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubDomainUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SubDomainUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubDomainPayload>[]
          }
          upsert: {
            args: Prisma.SubDomainUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubDomainPayload>
          }
          aggregate: {
            args: Prisma.SubDomainAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubDomain>
          }
          groupBy: {
            args: Prisma.SubDomainGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubDomainGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubDomainCountArgs<ExtArgs>
            result: $Utils.Optional<SubDomainCountAggregateOutputType> | number
          }
        }
      }
      Site: {
        payload: Prisma.$SitePayload<ExtArgs>
        fields: Prisma.SiteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SiteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SiteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload>
          }
          findFirst: {
            args: Prisma.SiteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SiteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload>
          }
          findMany: {
            args: Prisma.SiteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload>[]
          }
          create: {
            args: Prisma.SiteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload>
          }
          createMany: {
            args: Prisma.SiteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SiteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload>[]
          }
          delete: {
            args: Prisma.SiteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload>
          }
          update: {
            args: Prisma.SiteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload>
          }
          deleteMany: {
            args: Prisma.SiteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SiteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SiteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload>[]
          }
          upsert: {
            args: Prisma.SiteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload>
          }
          aggregate: {
            args: Prisma.SiteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSite>
          }
          groupBy: {
            args: Prisma.SiteGroupByArgs<ExtArgs>
            result: $Utils.Optional<SiteGroupByOutputType>[]
          }
          count: {
            args: Prisma.SiteCountArgs<ExtArgs>
            result: $Utils.Optional<SiteCountAggregateOutputType> | number
          }
        }
      }
      Log: {
        payload: Prisma.$LogPayload<ExtArgs>
        fields: Prisma.LogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          findFirst: {
            args: Prisma.LogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          findMany: {
            args: Prisma.LogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>[]
          }
          create: {
            args: Prisma.LogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          createMany: {
            args: Prisma.LogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>[]
          }
          delete: {
            args: Prisma.LogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          update: {
            args: Prisma.LogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          deleteMany: {
            args: Prisma.LogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>[]
          }
          upsert: {
            args: Prisma.LogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          aggregate: {
            args: Prisma.LogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLog>
          }
          groupBy: {
            args: Prisma.LogGroupByArgs<ExtArgs>
            result: $Utils.Optional<LogGroupByOutputType>[]
          }
          count: {
            args: Prisma.LogCountArgs<ExtArgs>
            result: $Utils.Optional<LogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    worker?: WorkerOmit
    passCode?: PassCodeOmit
    domain?: DomainOmit
    subDomain?: SubDomainOmit
    site?: SiteOmit
    log?: LogOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type WorkerCountOutputType
   */

  export type WorkerCountOutputType = {
    subdomains: number
    logs: number
    passCode: number
  }

  export type WorkerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subdomains?: boolean | WorkerCountOutputTypeCountSubdomainsArgs
    logs?: boolean | WorkerCountOutputTypeCountLogsArgs
    passCode?: boolean | WorkerCountOutputTypeCountPassCodeArgs
  }

  // Custom InputTypes
  /**
   * WorkerCountOutputType without action
   */
  export type WorkerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkerCountOutputType
     */
    select?: WorkerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkerCountOutputType without action
   */
  export type WorkerCountOutputTypeCountSubdomainsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubDomainWhereInput
  }

  /**
   * WorkerCountOutputType without action
   */
  export type WorkerCountOutputTypeCountLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogWhereInput
  }

  /**
   * WorkerCountOutputType without action
   */
  export type WorkerCountOutputTypeCountPassCodeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PassCodeWhereInput
  }


  /**
   * Count Type DomainCountOutputType
   */

  export type DomainCountOutputType = {
    subdomains: number
  }

  export type DomainCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subdomains?: boolean | DomainCountOutputTypeCountSubdomainsArgs
  }

  // Custom InputTypes
  /**
   * DomainCountOutputType without action
   */
  export type DomainCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DomainCountOutputType
     */
    select?: DomainCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DomainCountOutputType without action
   */
  export type DomainCountOutputTypeCountSubdomainsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubDomainWhereInput
  }


  /**
   * Count Type SubDomainCountOutputType
   */

  export type SubDomainCountOutputType = {
    logs: number
  }

  export type SubDomainCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    logs?: boolean | SubDomainCountOutputTypeCountLogsArgs
  }

  // Custom InputTypes
  /**
   * SubDomainCountOutputType without action
   */
  export type SubDomainCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubDomainCountOutputType
     */
    select?: SubDomainCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SubDomainCountOutputType without action
   */
  export type SubDomainCountOutputTypeCountLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogWhereInput
  }


  /**
   * Count Type SiteCountOutputType
   */

  export type SiteCountOutputType = {
    subDomain: number
  }

  export type SiteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subDomain?: boolean | SiteCountOutputTypeCountSubDomainArgs
  }

  // Custom InputTypes
  /**
   * SiteCountOutputType without action
   */
  export type SiteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteCountOutputType
     */
    select?: SiteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SiteCountOutputType without action
   */
  export type SiteCountOutputTypeCountSubDomainArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubDomainWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Worker
   */

  export type AggregateWorker = {
    _count: WorkerCountAggregateOutputType | null
    _avg: WorkerAvgAggregateOutputType | null
    _sum: WorkerSumAggregateOutputType | null
    _min: WorkerMinAggregateOutputType | null
    _max: WorkerMaxAggregateOutputType | null
  }

  export type WorkerAvgAggregateOutputType = {
    id: number | null
  }

  export type WorkerSumAggregateOutputType = {
    id: number | null
  }

  export type WorkerMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    secretKey: string | null
    telegramId: string | null
    blocked: boolean | null
    username: string | null
  }

  export type WorkerMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    secretKey: string | null
    telegramId: string | null
    blocked: boolean | null
    username: string | null
  }

  export type WorkerCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    name: number
    secretKey: number
    telegramId: number
    blocked: number
    username: number
    _all: number
  }


  export type WorkerAvgAggregateInputType = {
    id?: true
  }

  export type WorkerSumAggregateInputType = {
    id?: true
  }

  export type WorkerMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    secretKey?: true
    telegramId?: true
    blocked?: true
    username?: true
  }

  export type WorkerMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    secretKey?: true
    telegramId?: true
    blocked?: true
    username?: true
  }

  export type WorkerCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    secretKey?: true
    telegramId?: true
    blocked?: true
    username?: true
    _all?: true
  }

  export type WorkerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Worker to aggregate.
     */
    where?: WorkerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workers to fetch.
     */
    orderBy?: WorkerOrderByWithRelationInput | WorkerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Workers
    **/
    _count?: true | WorkerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkerMaxAggregateInputType
  }

  export type GetWorkerAggregateType<T extends WorkerAggregateArgs> = {
        [P in keyof T & keyof AggregateWorker]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorker[P]>
      : GetScalarType<T[P], AggregateWorker[P]>
  }




  export type WorkerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkerWhereInput
    orderBy?: WorkerOrderByWithAggregationInput | WorkerOrderByWithAggregationInput[]
    by: WorkerScalarFieldEnum[] | WorkerScalarFieldEnum
    having?: WorkerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkerCountAggregateInputType | true
    _avg?: WorkerAvgAggregateInputType
    _sum?: WorkerSumAggregateInputType
    _min?: WorkerMinAggregateInputType
    _max?: WorkerMaxAggregateInputType
  }

  export type WorkerGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    name: string
    secretKey: string | null
    telegramId: string
    blocked: boolean | null
    username: string | null
    _count: WorkerCountAggregateOutputType | null
    _avg: WorkerAvgAggregateOutputType | null
    _sum: WorkerSumAggregateOutputType | null
    _min: WorkerMinAggregateOutputType | null
    _max: WorkerMaxAggregateOutputType | null
  }

  type GetWorkerGroupByPayload<T extends WorkerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkerGroupByOutputType[P]>
            : GetScalarType<T[P], WorkerGroupByOutputType[P]>
        }
      >
    >


  export type WorkerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    secretKey?: boolean
    telegramId?: boolean
    blocked?: boolean
    username?: boolean
    subdomains?: boolean | Worker$subdomainsArgs<ExtArgs>
    logs?: boolean | Worker$logsArgs<ExtArgs>
    passCode?: boolean | Worker$passCodeArgs<ExtArgs>
    _count?: boolean | WorkerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["worker"]>

  export type WorkerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    secretKey?: boolean
    telegramId?: boolean
    blocked?: boolean
    username?: boolean
  }, ExtArgs["result"]["worker"]>

  export type WorkerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    secretKey?: boolean
    telegramId?: boolean
    blocked?: boolean
    username?: boolean
  }, ExtArgs["result"]["worker"]>

  export type WorkerSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    secretKey?: boolean
    telegramId?: boolean
    blocked?: boolean
    username?: boolean
  }

  export type WorkerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "name" | "secretKey" | "telegramId" | "blocked" | "username", ExtArgs["result"]["worker"]>
  export type WorkerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subdomains?: boolean | Worker$subdomainsArgs<ExtArgs>
    logs?: boolean | Worker$logsArgs<ExtArgs>
    passCode?: boolean | Worker$passCodeArgs<ExtArgs>
    _count?: boolean | WorkerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WorkerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type WorkerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $WorkerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Worker"
    objects: {
      subdomains: Prisma.$SubDomainPayload<ExtArgs>[]
      logs: Prisma.$LogPayload<ExtArgs>[]
      passCode: Prisma.$PassCodePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updatedAt: Date
      name: string
      secretKey: string | null
      telegramId: string
      blocked: boolean | null
      username: string | null
    }, ExtArgs["result"]["worker"]>
    composites: {}
  }

  type WorkerGetPayload<S extends boolean | null | undefined | WorkerDefaultArgs> = $Result.GetResult<Prisma.$WorkerPayload, S>

  type WorkerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkerCountAggregateInputType | true
    }

  export interface WorkerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Worker'], meta: { name: 'Worker' } }
    /**
     * Find zero or one Worker that matches the filter.
     * @param {WorkerFindUniqueArgs} args - Arguments to find a Worker
     * @example
     * // Get one Worker
     * const worker = await prisma.worker.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkerFindUniqueArgs>(args: SelectSubset<T, WorkerFindUniqueArgs<ExtArgs>>): Prisma__WorkerClient<$Result.GetResult<Prisma.$WorkerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Worker that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkerFindUniqueOrThrowArgs} args - Arguments to find a Worker
     * @example
     * // Get one Worker
     * const worker = await prisma.worker.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkerFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkerClient<$Result.GetResult<Prisma.$WorkerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Worker that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkerFindFirstArgs} args - Arguments to find a Worker
     * @example
     * // Get one Worker
     * const worker = await prisma.worker.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkerFindFirstArgs>(args?: SelectSubset<T, WorkerFindFirstArgs<ExtArgs>>): Prisma__WorkerClient<$Result.GetResult<Prisma.$WorkerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Worker that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkerFindFirstOrThrowArgs} args - Arguments to find a Worker
     * @example
     * // Get one Worker
     * const worker = await prisma.worker.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkerFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkerFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkerClient<$Result.GetResult<Prisma.$WorkerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Workers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Workers
     * const workers = await prisma.worker.findMany()
     * 
     * // Get first 10 Workers
     * const workers = await prisma.worker.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workerWithIdOnly = await prisma.worker.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkerFindManyArgs>(args?: SelectSubset<T, WorkerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Worker.
     * @param {WorkerCreateArgs} args - Arguments to create a Worker.
     * @example
     * // Create one Worker
     * const Worker = await prisma.worker.create({
     *   data: {
     *     // ... data to create a Worker
     *   }
     * })
     * 
     */
    create<T extends WorkerCreateArgs>(args: SelectSubset<T, WorkerCreateArgs<ExtArgs>>): Prisma__WorkerClient<$Result.GetResult<Prisma.$WorkerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Workers.
     * @param {WorkerCreateManyArgs} args - Arguments to create many Workers.
     * @example
     * // Create many Workers
     * const worker = await prisma.worker.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkerCreateManyArgs>(args?: SelectSubset<T, WorkerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Workers and returns the data saved in the database.
     * @param {WorkerCreateManyAndReturnArgs} args - Arguments to create many Workers.
     * @example
     * // Create many Workers
     * const worker = await prisma.worker.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Workers and only return the `id`
     * const workerWithIdOnly = await prisma.worker.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkerCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Worker.
     * @param {WorkerDeleteArgs} args - Arguments to delete one Worker.
     * @example
     * // Delete one Worker
     * const Worker = await prisma.worker.delete({
     *   where: {
     *     // ... filter to delete one Worker
     *   }
     * })
     * 
     */
    delete<T extends WorkerDeleteArgs>(args: SelectSubset<T, WorkerDeleteArgs<ExtArgs>>): Prisma__WorkerClient<$Result.GetResult<Prisma.$WorkerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Worker.
     * @param {WorkerUpdateArgs} args - Arguments to update one Worker.
     * @example
     * // Update one Worker
     * const worker = await prisma.worker.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkerUpdateArgs>(args: SelectSubset<T, WorkerUpdateArgs<ExtArgs>>): Prisma__WorkerClient<$Result.GetResult<Prisma.$WorkerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Workers.
     * @param {WorkerDeleteManyArgs} args - Arguments to filter Workers to delete.
     * @example
     * // Delete a few Workers
     * const { count } = await prisma.worker.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkerDeleteManyArgs>(args?: SelectSubset<T, WorkerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Workers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Workers
     * const worker = await prisma.worker.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkerUpdateManyArgs>(args: SelectSubset<T, WorkerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Workers and returns the data updated in the database.
     * @param {WorkerUpdateManyAndReturnArgs} args - Arguments to update many Workers.
     * @example
     * // Update many Workers
     * const worker = await prisma.worker.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Workers and only return the `id`
     * const workerWithIdOnly = await prisma.worker.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkerUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Worker.
     * @param {WorkerUpsertArgs} args - Arguments to update or create a Worker.
     * @example
     * // Update or create a Worker
     * const worker = await prisma.worker.upsert({
     *   create: {
     *     // ... data to create a Worker
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Worker we want to update
     *   }
     * })
     */
    upsert<T extends WorkerUpsertArgs>(args: SelectSubset<T, WorkerUpsertArgs<ExtArgs>>): Prisma__WorkerClient<$Result.GetResult<Prisma.$WorkerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Workers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkerCountArgs} args - Arguments to filter Workers to count.
     * @example
     * // Count the number of Workers
     * const count = await prisma.worker.count({
     *   where: {
     *     // ... the filter for the Workers we want to count
     *   }
     * })
    **/
    count<T extends WorkerCountArgs>(
      args?: Subset<T, WorkerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Worker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkerAggregateArgs>(args: Subset<T, WorkerAggregateArgs>): Prisma.PrismaPromise<GetWorkerAggregateType<T>>

    /**
     * Group by Worker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkerGroupByArgs['orderBy'] }
        : { orderBy?: WorkerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Worker model
   */
  readonly fields: WorkerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Worker.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subdomains<T extends Worker$subdomainsArgs<ExtArgs> = {}>(args?: Subset<T, Worker$subdomainsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubDomainPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    logs<T extends Worker$logsArgs<ExtArgs> = {}>(args?: Subset<T, Worker$logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    passCode<T extends Worker$passCodeArgs<ExtArgs> = {}>(args?: Subset<T, Worker$passCodeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PassCodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Worker model
   */
  interface WorkerFieldRefs {
    readonly id: FieldRef<"Worker", 'Int'>
    readonly createdAt: FieldRef<"Worker", 'DateTime'>
    readonly updatedAt: FieldRef<"Worker", 'DateTime'>
    readonly name: FieldRef<"Worker", 'String'>
    readonly secretKey: FieldRef<"Worker", 'String'>
    readonly telegramId: FieldRef<"Worker", 'String'>
    readonly blocked: FieldRef<"Worker", 'Boolean'>
    readonly username: FieldRef<"Worker", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Worker findUnique
   */
  export type WorkerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Worker
     */
    select?: WorkerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Worker
     */
    omit?: WorkerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkerInclude<ExtArgs> | null
    /**
     * Filter, which Worker to fetch.
     */
    where: WorkerWhereUniqueInput
  }

  /**
   * Worker findUniqueOrThrow
   */
  export type WorkerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Worker
     */
    select?: WorkerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Worker
     */
    omit?: WorkerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkerInclude<ExtArgs> | null
    /**
     * Filter, which Worker to fetch.
     */
    where: WorkerWhereUniqueInput
  }

  /**
   * Worker findFirst
   */
  export type WorkerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Worker
     */
    select?: WorkerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Worker
     */
    omit?: WorkerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkerInclude<ExtArgs> | null
    /**
     * Filter, which Worker to fetch.
     */
    where?: WorkerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workers to fetch.
     */
    orderBy?: WorkerOrderByWithRelationInput | WorkerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Workers.
     */
    cursor?: WorkerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Workers.
     */
    distinct?: WorkerScalarFieldEnum | WorkerScalarFieldEnum[]
  }

  /**
   * Worker findFirstOrThrow
   */
  export type WorkerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Worker
     */
    select?: WorkerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Worker
     */
    omit?: WorkerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkerInclude<ExtArgs> | null
    /**
     * Filter, which Worker to fetch.
     */
    where?: WorkerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workers to fetch.
     */
    orderBy?: WorkerOrderByWithRelationInput | WorkerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Workers.
     */
    cursor?: WorkerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Workers.
     */
    distinct?: WorkerScalarFieldEnum | WorkerScalarFieldEnum[]
  }

  /**
   * Worker findMany
   */
  export type WorkerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Worker
     */
    select?: WorkerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Worker
     */
    omit?: WorkerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkerInclude<ExtArgs> | null
    /**
     * Filter, which Workers to fetch.
     */
    where?: WorkerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workers to fetch.
     */
    orderBy?: WorkerOrderByWithRelationInput | WorkerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Workers.
     */
    cursor?: WorkerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workers.
     */
    skip?: number
    distinct?: WorkerScalarFieldEnum | WorkerScalarFieldEnum[]
  }

  /**
   * Worker create
   */
  export type WorkerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Worker
     */
    select?: WorkerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Worker
     */
    omit?: WorkerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkerInclude<ExtArgs> | null
    /**
     * The data needed to create a Worker.
     */
    data: XOR<WorkerCreateInput, WorkerUncheckedCreateInput>
  }

  /**
   * Worker createMany
   */
  export type WorkerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Workers.
     */
    data: WorkerCreateManyInput | WorkerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Worker createManyAndReturn
   */
  export type WorkerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Worker
     */
    select?: WorkerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Worker
     */
    omit?: WorkerOmit<ExtArgs> | null
    /**
     * The data used to create many Workers.
     */
    data: WorkerCreateManyInput | WorkerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Worker update
   */
  export type WorkerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Worker
     */
    select?: WorkerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Worker
     */
    omit?: WorkerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkerInclude<ExtArgs> | null
    /**
     * The data needed to update a Worker.
     */
    data: XOR<WorkerUpdateInput, WorkerUncheckedUpdateInput>
    /**
     * Choose, which Worker to update.
     */
    where: WorkerWhereUniqueInput
  }

  /**
   * Worker updateMany
   */
  export type WorkerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Workers.
     */
    data: XOR<WorkerUpdateManyMutationInput, WorkerUncheckedUpdateManyInput>
    /**
     * Filter which Workers to update
     */
    where?: WorkerWhereInput
    /**
     * Limit how many Workers to update.
     */
    limit?: number
  }

  /**
   * Worker updateManyAndReturn
   */
  export type WorkerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Worker
     */
    select?: WorkerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Worker
     */
    omit?: WorkerOmit<ExtArgs> | null
    /**
     * The data used to update Workers.
     */
    data: XOR<WorkerUpdateManyMutationInput, WorkerUncheckedUpdateManyInput>
    /**
     * Filter which Workers to update
     */
    where?: WorkerWhereInput
    /**
     * Limit how many Workers to update.
     */
    limit?: number
  }

  /**
   * Worker upsert
   */
  export type WorkerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Worker
     */
    select?: WorkerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Worker
     */
    omit?: WorkerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkerInclude<ExtArgs> | null
    /**
     * The filter to search for the Worker to update in case it exists.
     */
    where: WorkerWhereUniqueInput
    /**
     * In case the Worker found by the `where` argument doesn't exist, create a new Worker with this data.
     */
    create: XOR<WorkerCreateInput, WorkerUncheckedCreateInput>
    /**
     * In case the Worker was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkerUpdateInput, WorkerUncheckedUpdateInput>
  }

  /**
   * Worker delete
   */
  export type WorkerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Worker
     */
    select?: WorkerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Worker
     */
    omit?: WorkerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkerInclude<ExtArgs> | null
    /**
     * Filter which Worker to delete.
     */
    where: WorkerWhereUniqueInput
  }

  /**
   * Worker deleteMany
   */
  export type WorkerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Workers to delete
     */
    where?: WorkerWhereInput
    /**
     * Limit how many Workers to delete.
     */
    limit?: number
  }

  /**
   * Worker.subdomains
   */
  export type Worker$subdomainsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubDomain
     */
    select?: SubDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubDomain
     */
    omit?: SubDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubDomainInclude<ExtArgs> | null
    where?: SubDomainWhereInput
    orderBy?: SubDomainOrderByWithRelationInput | SubDomainOrderByWithRelationInput[]
    cursor?: SubDomainWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubDomainScalarFieldEnum | SubDomainScalarFieldEnum[]
  }

  /**
   * Worker.logs
   */
  export type Worker$logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    where?: LogWhereInput
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    cursor?: LogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * Worker.passCode
   */
  export type Worker$passCodeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassCode
     */
    select?: PassCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PassCode
     */
    omit?: PassCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassCodeInclude<ExtArgs> | null
    where?: PassCodeWhereInput
    orderBy?: PassCodeOrderByWithRelationInput | PassCodeOrderByWithRelationInput[]
    cursor?: PassCodeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PassCodeScalarFieldEnum | PassCodeScalarFieldEnum[]
  }

  /**
   * Worker without action
   */
  export type WorkerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Worker
     */
    select?: WorkerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Worker
     */
    omit?: WorkerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkerInclude<ExtArgs> | null
  }


  /**
   * Model PassCode
   */

  export type AggregatePassCode = {
    _count: PassCodeCountAggregateOutputType | null
    _avg: PassCodeAvgAggregateOutputType | null
    _sum: PassCodeSumAggregateOutputType | null
    _min: PassCodeMinAggregateOutputType | null
    _max: PassCodeMaxAggregateOutputType | null
  }

  export type PassCodeAvgAggregateOutputType = {
    workerId: number | null
  }

  export type PassCodeSumAggregateOutputType = {
    workerId: number | null
  }

  export type PassCodeMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    workerId: number | null
    active: boolean | null
  }

  export type PassCodeMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    workerId: number | null
    active: boolean | null
  }

  export type PassCodeCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    workerId: number
    active: number
    _all: number
  }


  export type PassCodeAvgAggregateInputType = {
    workerId?: true
  }

  export type PassCodeSumAggregateInputType = {
    workerId?: true
  }

  export type PassCodeMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    workerId?: true
    active?: true
  }

  export type PassCodeMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    workerId?: true
    active?: true
  }

  export type PassCodeCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    workerId?: true
    active?: true
    _all?: true
  }

  export type PassCodeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PassCode to aggregate.
     */
    where?: PassCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PassCodes to fetch.
     */
    orderBy?: PassCodeOrderByWithRelationInput | PassCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PassCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PassCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PassCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PassCodes
    **/
    _count?: true | PassCodeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PassCodeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PassCodeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PassCodeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PassCodeMaxAggregateInputType
  }

  export type GetPassCodeAggregateType<T extends PassCodeAggregateArgs> = {
        [P in keyof T & keyof AggregatePassCode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePassCode[P]>
      : GetScalarType<T[P], AggregatePassCode[P]>
  }




  export type PassCodeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PassCodeWhereInput
    orderBy?: PassCodeOrderByWithAggregationInput | PassCodeOrderByWithAggregationInput[]
    by: PassCodeScalarFieldEnum[] | PassCodeScalarFieldEnum
    having?: PassCodeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PassCodeCountAggregateInputType | true
    _avg?: PassCodeAvgAggregateInputType
    _sum?: PassCodeSumAggregateInputType
    _min?: PassCodeMinAggregateInputType
    _max?: PassCodeMaxAggregateInputType
  }

  export type PassCodeGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    workerId: number | null
    active: boolean
    _count: PassCodeCountAggregateOutputType | null
    _avg: PassCodeAvgAggregateOutputType | null
    _sum: PassCodeSumAggregateOutputType | null
    _min: PassCodeMinAggregateOutputType | null
    _max: PassCodeMaxAggregateOutputType | null
  }

  type GetPassCodeGroupByPayload<T extends PassCodeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PassCodeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PassCodeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PassCodeGroupByOutputType[P]>
            : GetScalarType<T[P], PassCodeGroupByOutputType[P]>
        }
      >
    >


  export type PassCodeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workerId?: boolean
    active?: boolean
    worker?: boolean | PassCode$workerArgs<ExtArgs>
    log?: boolean | PassCode$logArgs<ExtArgs>
  }, ExtArgs["result"]["passCode"]>

  export type PassCodeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workerId?: boolean
    active?: boolean
    worker?: boolean | PassCode$workerArgs<ExtArgs>
  }, ExtArgs["result"]["passCode"]>

  export type PassCodeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workerId?: boolean
    active?: boolean
    worker?: boolean | PassCode$workerArgs<ExtArgs>
  }, ExtArgs["result"]["passCode"]>

  export type PassCodeSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workerId?: boolean
    active?: boolean
  }

  export type PassCodeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "workerId" | "active", ExtArgs["result"]["passCode"]>
  export type PassCodeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    worker?: boolean | PassCode$workerArgs<ExtArgs>
    log?: boolean | PassCode$logArgs<ExtArgs>
  }
  export type PassCodeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    worker?: boolean | PassCode$workerArgs<ExtArgs>
  }
  export type PassCodeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    worker?: boolean | PassCode$workerArgs<ExtArgs>
  }

  export type $PassCodePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PassCode"
    objects: {
      worker: Prisma.$WorkerPayload<ExtArgs> | null
      log: Prisma.$LogPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      workerId: number | null
      active: boolean
    }, ExtArgs["result"]["passCode"]>
    composites: {}
  }

  type PassCodeGetPayload<S extends boolean | null | undefined | PassCodeDefaultArgs> = $Result.GetResult<Prisma.$PassCodePayload, S>

  type PassCodeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PassCodeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PassCodeCountAggregateInputType | true
    }

  export interface PassCodeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PassCode'], meta: { name: 'PassCode' } }
    /**
     * Find zero or one PassCode that matches the filter.
     * @param {PassCodeFindUniqueArgs} args - Arguments to find a PassCode
     * @example
     * // Get one PassCode
     * const passCode = await prisma.passCode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PassCodeFindUniqueArgs>(args: SelectSubset<T, PassCodeFindUniqueArgs<ExtArgs>>): Prisma__PassCodeClient<$Result.GetResult<Prisma.$PassCodePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PassCode that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PassCodeFindUniqueOrThrowArgs} args - Arguments to find a PassCode
     * @example
     * // Get one PassCode
     * const passCode = await prisma.passCode.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PassCodeFindUniqueOrThrowArgs>(args: SelectSubset<T, PassCodeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PassCodeClient<$Result.GetResult<Prisma.$PassCodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PassCode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassCodeFindFirstArgs} args - Arguments to find a PassCode
     * @example
     * // Get one PassCode
     * const passCode = await prisma.passCode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PassCodeFindFirstArgs>(args?: SelectSubset<T, PassCodeFindFirstArgs<ExtArgs>>): Prisma__PassCodeClient<$Result.GetResult<Prisma.$PassCodePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PassCode that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassCodeFindFirstOrThrowArgs} args - Arguments to find a PassCode
     * @example
     * // Get one PassCode
     * const passCode = await prisma.passCode.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PassCodeFindFirstOrThrowArgs>(args?: SelectSubset<T, PassCodeFindFirstOrThrowArgs<ExtArgs>>): Prisma__PassCodeClient<$Result.GetResult<Prisma.$PassCodePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PassCodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassCodeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PassCodes
     * const passCodes = await prisma.passCode.findMany()
     * 
     * // Get first 10 PassCodes
     * const passCodes = await prisma.passCode.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const passCodeWithIdOnly = await prisma.passCode.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PassCodeFindManyArgs>(args?: SelectSubset<T, PassCodeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PassCodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PassCode.
     * @param {PassCodeCreateArgs} args - Arguments to create a PassCode.
     * @example
     * // Create one PassCode
     * const PassCode = await prisma.passCode.create({
     *   data: {
     *     // ... data to create a PassCode
     *   }
     * })
     * 
     */
    create<T extends PassCodeCreateArgs>(args: SelectSubset<T, PassCodeCreateArgs<ExtArgs>>): Prisma__PassCodeClient<$Result.GetResult<Prisma.$PassCodePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PassCodes.
     * @param {PassCodeCreateManyArgs} args - Arguments to create many PassCodes.
     * @example
     * // Create many PassCodes
     * const passCode = await prisma.passCode.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PassCodeCreateManyArgs>(args?: SelectSubset<T, PassCodeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PassCodes and returns the data saved in the database.
     * @param {PassCodeCreateManyAndReturnArgs} args - Arguments to create many PassCodes.
     * @example
     * // Create many PassCodes
     * const passCode = await prisma.passCode.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PassCodes and only return the `id`
     * const passCodeWithIdOnly = await prisma.passCode.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PassCodeCreateManyAndReturnArgs>(args?: SelectSubset<T, PassCodeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PassCodePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PassCode.
     * @param {PassCodeDeleteArgs} args - Arguments to delete one PassCode.
     * @example
     * // Delete one PassCode
     * const PassCode = await prisma.passCode.delete({
     *   where: {
     *     // ... filter to delete one PassCode
     *   }
     * })
     * 
     */
    delete<T extends PassCodeDeleteArgs>(args: SelectSubset<T, PassCodeDeleteArgs<ExtArgs>>): Prisma__PassCodeClient<$Result.GetResult<Prisma.$PassCodePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PassCode.
     * @param {PassCodeUpdateArgs} args - Arguments to update one PassCode.
     * @example
     * // Update one PassCode
     * const passCode = await prisma.passCode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PassCodeUpdateArgs>(args: SelectSubset<T, PassCodeUpdateArgs<ExtArgs>>): Prisma__PassCodeClient<$Result.GetResult<Prisma.$PassCodePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PassCodes.
     * @param {PassCodeDeleteManyArgs} args - Arguments to filter PassCodes to delete.
     * @example
     * // Delete a few PassCodes
     * const { count } = await prisma.passCode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PassCodeDeleteManyArgs>(args?: SelectSubset<T, PassCodeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PassCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassCodeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PassCodes
     * const passCode = await prisma.passCode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PassCodeUpdateManyArgs>(args: SelectSubset<T, PassCodeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PassCodes and returns the data updated in the database.
     * @param {PassCodeUpdateManyAndReturnArgs} args - Arguments to update many PassCodes.
     * @example
     * // Update many PassCodes
     * const passCode = await prisma.passCode.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PassCodes and only return the `id`
     * const passCodeWithIdOnly = await prisma.passCode.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PassCodeUpdateManyAndReturnArgs>(args: SelectSubset<T, PassCodeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PassCodePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PassCode.
     * @param {PassCodeUpsertArgs} args - Arguments to update or create a PassCode.
     * @example
     * // Update or create a PassCode
     * const passCode = await prisma.passCode.upsert({
     *   create: {
     *     // ... data to create a PassCode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PassCode we want to update
     *   }
     * })
     */
    upsert<T extends PassCodeUpsertArgs>(args: SelectSubset<T, PassCodeUpsertArgs<ExtArgs>>): Prisma__PassCodeClient<$Result.GetResult<Prisma.$PassCodePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PassCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassCodeCountArgs} args - Arguments to filter PassCodes to count.
     * @example
     * // Count the number of PassCodes
     * const count = await prisma.passCode.count({
     *   where: {
     *     // ... the filter for the PassCodes we want to count
     *   }
     * })
    **/
    count<T extends PassCodeCountArgs>(
      args?: Subset<T, PassCodeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PassCodeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PassCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassCodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PassCodeAggregateArgs>(args: Subset<T, PassCodeAggregateArgs>): Prisma.PrismaPromise<GetPassCodeAggregateType<T>>

    /**
     * Group by PassCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassCodeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PassCodeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PassCodeGroupByArgs['orderBy'] }
        : { orderBy?: PassCodeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PassCodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPassCodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PassCode model
   */
  readonly fields: PassCodeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PassCode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PassCodeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    worker<T extends PassCode$workerArgs<ExtArgs> = {}>(args?: Subset<T, PassCode$workerArgs<ExtArgs>>): Prisma__WorkerClient<$Result.GetResult<Prisma.$WorkerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    log<T extends PassCode$logArgs<ExtArgs> = {}>(args?: Subset<T, PassCode$logArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PassCode model
   */
  interface PassCodeFieldRefs {
    readonly id: FieldRef<"PassCode", 'String'>
    readonly createdAt: FieldRef<"PassCode", 'DateTime'>
    readonly updatedAt: FieldRef<"PassCode", 'DateTime'>
    readonly workerId: FieldRef<"PassCode", 'Int'>
    readonly active: FieldRef<"PassCode", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * PassCode findUnique
   */
  export type PassCodeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassCode
     */
    select?: PassCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PassCode
     */
    omit?: PassCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassCodeInclude<ExtArgs> | null
    /**
     * Filter, which PassCode to fetch.
     */
    where: PassCodeWhereUniqueInput
  }

  /**
   * PassCode findUniqueOrThrow
   */
  export type PassCodeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassCode
     */
    select?: PassCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PassCode
     */
    omit?: PassCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassCodeInclude<ExtArgs> | null
    /**
     * Filter, which PassCode to fetch.
     */
    where: PassCodeWhereUniqueInput
  }

  /**
   * PassCode findFirst
   */
  export type PassCodeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassCode
     */
    select?: PassCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PassCode
     */
    omit?: PassCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassCodeInclude<ExtArgs> | null
    /**
     * Filter, which PassCode to fetch.
     */
    where?: PassCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PassCodes to fetch.
     */
    orderBy?: PassCodeOrderByWithRelationInput | PassCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PassCodes.
     */
    cursor?: PassCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PassCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PassCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PassCodes.
     */
    distinct?: PassCodeScalarFieldEnum | PassCodeScalarFieldEnum[]
  }

  /**
   * PassCode findFirstOrThrow
   */
  export type PassCodeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassCode
     */
    select?: PassCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PassCode
     */
    omit?: PassCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassCodeInclude<ExtArgs> | null
    /**
     * Filter, which PassCode to fetch.
     */
    where?: PassCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PassCodes to fetch.
     */
    orderBy?: PassCodeOrderByWithRelationInput | PassCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PassCodes.
     */
    cursor?: PassCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PassCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PassCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PassCodes.
     */
    distinct?: PassCodeScalarFieldEnum | PassCodeScalarFieldEnum[]
  }

  /**
   * PassCode findMany
   */
  export type PassCodeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassCode
     */
    select?: PassCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PassCode
     */
    omit?: PassCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassCodeInclude<ExtArgs> | null
    /**
     * Filter, which PassCodes to fetch.
     */
    where?: PassCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PassCodes to fetch.
     */
    orderBy?: PassCodeOrderByWithRelationInput | PassCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PassCodes.
     */
    cursor?: PassCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PassCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PassCodes.
     */
    skip?: number
    distinct?: PassCodeScalarFieldEnum | PassCodeScalarFieldEnum[]
  }

  /**
   * PassCode create
   */
  export type PassCodeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassCode
     */
    select?: PassCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PassCode
     */
    omit?: PassCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassCodeInclude<ExtArgs> | null
    /**
     * The data needed to create a PassCode.
     */
    data: XOR<PassCodeCreateInput, PassCodeUncheckedCreateInput>
  }

  /**
   * PassCode createMany
   */
  export type PassCodeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PassCodes.
     */
    data: PassCodeCreateManyInput | PassCodeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PassCode createManyAndReturn
   */
  export type PassCodeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassCode
     */
    select?: PassCodeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PassCode
     */
    omit?: PassCodeOmit<ExtArgs> | null
    /**
     * The data used to create many PassCodes.
     */
    data: PassCodeCreateManyInput | PassCodeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassCodeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PassCode update
   */
  export type PassCodeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassCode
     */
    select?: PassCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PassCode
     */
    omit?: PassCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassCodeInclude<ExtArgs> | null
    /**
     * The data needed to update a PassCode.
     */
    data: XOR<PassCodeUpdateInput, PassCodeUncheckedUpdateInput>
    /**
     * Choose, which PassCode to update.
     */
    where: PassCodeWhereUniqueInput
  }

  /**
   * PassCode updateMany
   */
  export type PassCodeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PassCodes.
     */
    data: XOR<PassCodeUpdateManyMutationInput, PassCodeUncheckedUpdateManyInput>
    /**
     * Filter which PassCodes to update
     */
    where?: PassCodeWhereInput
    /**
     * Limit how many PassCodes to update.
     */
    limit?: number
  }

  /**
   * PassCode updateManyAndReturn
   */
  export type PassCodeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassCode
     */
    select?: PassCodeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PassCode
     */
    omit?: PassCodeOmit<ExtArgs> | null
    /**
     * The data used to update PassCodes.
     */
    data: XOR<PassCodeUpdateManyMutationInput, PassCodeUncheckedUpdateManyInput>
    /**
     * Filter which PassCodes to update
     */
    where?: PassCodeWhereInput
    /**
     * Limit how many PassCodes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassCodeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PassCode upsert
   */
  export type PassCodeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassCode
     */
    select?: PassCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PassCode
     */
    omit?: PassCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassCodeInclude<ExtArgs> | null
    /**
     * The filter to search for the PassCode to update in case it exists.
     */
    where: PassCodeWhereUniqueInput
    /**
     * In case the PassCode found by the `where` argument doesn't exist, create a new PassCode with this data.
     */
    create: XOR<PassCodeCreateInput, PassCodeUncheckedCreateInput>
    /**
     * In case the PassCode was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PassCodeUpdateInput, PassCodeUncheckedUpdateInput>
  }

  /**
   * PassCode delete
   */
  export type PassCodeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassCode
     */
    select?: PassCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PassCode
     */
    omit?: PassCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassCodeInclude<ExtArgs> | null
    /**
     * Filter which PassCode to delete.
     */
    where: PassCodeWhereUniqueInput
  }

  /**
   * PassCode deleteMany
   */
  export type PassCodeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PassCodes to delete
     */
    where?: PassCodeWhereInput
    /**
     * Limit how many PassCodes to delete.
     */
    limit?: number
  }

  /**
   * PassCode.worker
   */
  export type PassCode$workerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Worker
     */
    select?: WorkerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Worker
     */
    omit?: WorkerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkerInclude<ExtArgs> | null
    where?: WorkerWhereInput
  }

  /**
   * PassCode.log
   */
  export type PassCode$logArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    where?: LogWhereInput
  }

  /**
   * PassCode without action
   */
  export type PassCodeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassCode
     */
    select?: PassCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PassCode
     */
    omit?: PassCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassCodeInclude<ExtArgs> | null
  }


  /**
   * Model Domain
   */

  export type AggregateDomain = {
    _count: DomainCountAggregateOutputType | null
    _avg: DomainAvgAggregateOutputType | null
    _sum: DomainSumAggregateOutputType | null
    _min: DomainMinAggregateOutputType | null
    _max: DomainMaxAggregateOutputType | null
  }

  export type DomainAvgAggregateOutputType = {
    id: number | null
  }

  export type DomainSumAggregateOutputType = {
    id: number | null
  }

  export type DomainMinAggregateOutputType = {
    id: number | null
    domain: string | null
    createdAt: Date | null
    updatedAt: Date | null
    status: boolean | null
    cfId: string | null
  }

  export type DomainMaxAggregateOutputType = {
    id: number | null
    domain: string | null
    createdAt: Date | null
    updatedAt: Date | null
    status: boolean | null
    cfId: string | null
  }

  export type DomainCountAggregateOutputType = {
    id: number
    domain: number
    createdAt: number
    updatedAt: number
    status: number
    cfId: number
    _all: number
  }


  export type DomainAvgAggregateInputType = {
    id?: true
  }

  export type DomainSumAggregateInputType = {
    id?: true
  }

  export type DomainMinAggregateInputType = {
    id?: true
    domain?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    cfId?: true
  }

  export type DomainMaxAggregateInputType = {
    id?: true
    domain?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    cfId?: true
  }

  export type DomainCountAggregateInputType = {
    id?: true
    domain?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    cfId?: true
    _all?: true
  }

  export type DomainAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Domain to aggregate.
     */
    where?: DomainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Domains to fetch.
     */
    orderBy?: DomainOrderByWithRelationInput | DomainOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DomainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Domains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Domains.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Domains
    **/
    _count?: true | DomainCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DomainAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DomainSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DomainMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DomainMaxAggregateInputType
  }

  export type GetDomainAggregateType<T extends DomainAggregateArgs> = {
        [P in keyof T & keyof AggregateDomain]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDomain[P]>
      : GetScalarType<T[P], AggregateDomain[P]>
  }




  export type DomainGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DomainWhereInput
    orderBy?: DomainOrderByWithAggregationInput | DomainOrderByWithAggregationInput[]
    by: DomainScalarFieldEnum[] | DomainScalarFieldEnum
    having?: DomainScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DomainCountAggregateInputType | true
    _avg?: DomainAvgAggregateInputType
    _sum?: DomainSumAggregateInputType
    _min?: DomainMinAggregateInputType
    _max?: DomainMaxAggregateInputType
  }

  export type DomainGroupByOutputType = {
    id: number
    domain: string
    createdAt: Date
    updatedAt: Date
    status: boolean
    cfId: string
    _count: DomainCountAggregateOutputType | null
    _avg: DomainAvgAggregateOutputType | null
    _sum: DomainSumAggregateOutputType | null
    _min: DomainMinAggregateOutputType | null
    _max: DomainMaxAggregateOutputType | null
  }

  type GetDomainGroupByPayload<T extends DomainGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DomainGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DomainGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DomainGroupByOutputType[P]>
            : GetScalarType<T[P], DomainGroupByOutputType[P]>
        }
      >
    >


  export type DomainSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    domain?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
    cfId?: boolean
    subdomains?: boolean | Domain$subdomainsArgs<ExtArgs>
    _count?: boolean | DomainCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["domain"]>

  export type DomainSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    domain?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
    cfId?: boolean
  }, ExtArgs["result"]["domain"]>

  export type DomainSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    domain?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
    cfId?: boolean
  }, ExtArgs["result"]["domain"]>

  export type DomainSelectScalar = {
    id?: boolean
    domain?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
    cfId?: boolean
  }

  export type DomainOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "domain" | "createdAt" | "updatedAt" | "status" | "cfId", ExtArgs["result"]["domain"]>
  export type DomainInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subdomains?: boolean | Domain$subdomainsArgs<ExtArgs>
    _count?: boolean | DomainCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DomainIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type DomainIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DomainPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Domain"
    objects: {
      subdomains: Prisma.$SubDomainPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      domain: string
      createdAt: Date
      updatedAt: Date
      status: boolean
      cfId: string
    }, ExtArgs["result"]["domain"]>
    composites: {}
  }

  type DomainGetPayload<S extends boolean | null | undefined | DomainDefaultArgs> = $Result.GetResult<Prisma.$DomainPayload, S>

  type DomainCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DomainFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DomainCountAggregateInputType | true
    }

  export interface DomainDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Domain'], meta: { name: 'Domain' } }
    /**
     * Find zero or one Domain that matches the filter.
     * @param {DomainFindUniqueArgs} args - Arguments to find a Domain
     * @example
     * // Get one Domain
     * const domain = await prisma.domain.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DomainFindUniqueArgs>(args: SelectSubset<T, DomainFindUniqueArgs<ExtArgs>>): Prisma__DomainClient<$Result.GetResult<Prisma.$DomainPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Domain that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DomainFindUniqueOrThrowArgs} args - Arguments to find a Domain
     * @example
     * // Get one Domain
     * const domain = await prisma.domain.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DomainFindUniqueOrThrowArgs>(args: SelectSubset<T, DomainFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DomainClient<$Result.GetResult<Prisma.$DomainPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Domain that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DomainFindFirstArgs} args - Arguments to find a Domain
     * @example
     * // Get one Domain
     * const domain = await prisma.domain.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DomainFindFirstArgs>(args?: SelectSubset<T, DomainFindFirstArgs<ExtArgs>>): Prisma__DomainClient<$Result.GetResult<Prisma.$DomainPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Domain that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DomainFindFirstOrThrowArgs} args - Arguments to find a Domain
     * @example
     * // Get one Domain
     * const domain = await prisma.domain.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DomainFindFirstOrThrowArgs>(args?: SelectSubset<T, DomainFindFirstOrThrowArgs<ExtArgs>>): Prisma__DomainClient<$Result.GetResult<Prisma.$DomainPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Domains that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DomainFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Domains
     * const domains = await prisma.domain.findMany()
     * 
     * // Get first 10 Domains
     * const domains = await prisma.domain.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const domainWithIdOnly = await prisma.domain.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DomainFindManyArgs>(args?: SelectSubset<T, DomainFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DomainPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Domain.
     * @param {DomainCreateArgs} args - Arguments to create a Domain.
     * @example
     * // Create one Domain
     * const Domain = await prisma.domain.create({
     *   data: {
     *     // ... data to create a Domain
     *   }
     * })
     * 
     */
    create<T extends DomainCreateArgs>(args: SelectSubset<T, DomainCreateArgs<ExtArgs>>): Prisma__DomainClient<$Result.GetResult<Prisma.$DomainPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Domains.
     * @param {DomainCreateManyArgs} args - Arguments to create many Domains.
     * @example
     * // Create many Domains
     * const domain = await prisma.domain.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DomainCreateManyArgs>(args?: SelectSubset<T, DomainCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Domains and returns the data saved in the database.
     * @param {DomainCreateManyAndReturnArgs} args - Arguments to create many Domains.
     * @example
     * // Create many Domains
     * const domain = await prisma.domain.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Domains and only return the `id`
     * const domainWithIdOnly = await prisma.domain.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DomainCreateManyAndReturnArgs>(args?: SelectSubset<T, DomainCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DomainPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Domain.
     * @param {DomainDeleteArgs} args - Arguments to delete one Domain.
     * @example
     * // Delete one Domain
     * const Domain = await prisma.domain.delete({
     *   where: {
     *     // ... filter to delete one Domain
     *   }
     * })
     * 
     */
    delete<T extends DomainDeleteArgs>(args: SelectSubset<T, DomainDeleteArgs<ExtArgs>>): Prisma__DomainClient<$Result.GetResult<Prisma.$DomainPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Domain.
     * @param {DomainUpdateArgs} args - Arguments to update one Domain.
     * @example
     * // Update one Domain
     * const domain = await prisma.domain.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DomainUpdateArgs>(args: SelectSubset<T, DomainUpdateArgs<ExtArgs>>): Prisma__DomainClient<$Result.GetResult<Prisma.$DomainPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Domains.
     * @param {DomainDeleteManyArgs} args - Arguments to filter Domains to delete.
     * @example
     * // Delete a few Domains
     * const { count } = await prisma.domain.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DomainDeleteManyArgs>(args?: SelectSubset<T, DomainDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Domains.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DomainUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Domains
     * const domain = await prisma.domain.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DomainUpdateManyArgs>(args: SelectSubset<T, DomainUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Domains and returns the data updated in the database.
     * @param {DomainUpdateManyAndReturnArgs} args - Arguments to update many Domains.
     * @example
     * // Update many Domains
     * const domain = await prisma.domain.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Domains and only return the `id`
     * const domainWithIdOnly = await prisma.domain.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DomainUpdateManyAndReturnArgs>(args: SelectSubset<T, DomainUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DomainPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Domain.
     * @param {DomainUpsertArgs} args - Arguments to update or create a Domain.
     * @example
     * // Update or create a Domain
     * const domain = await prisma.domain.upsert({
     *   create: {
     *     // ... data to create a Domain
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Domain we want to update
     *   }
     * })
     */
    upsert<T extends DomainUpsertArgs>(args: SelectSubset<T, DomainUpsertArgs<ExtArgs>>): Prisma__DomainClient<$Result.GetResult<Prisma.$DomainPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Domains.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DomainCountArgs} args - Arguments to filter Domains to count.
     * @example
     * // Count the number of Domains
     * const count = await prisma.domain.count({
     *   where: {
     *     // ... the filter for the Domains we want to count
     *   }
     * })
    **/
    count<T extends DomainCountArgs>(
      args?: Subset<T, DomainCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DomainCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Domain.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DomainAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DomainAggregateArgs>(args: Subset<T, DomainAggregateArgs>): Prisma.PrismaPromise<GetDomainAggregateType<T>>

    /**
     * Group by Domain.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DomainGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DomainGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DomainGroupByArgs['orderBy'] }
        : { orderBy?: DomainGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DomainGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDomainGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Domain model
   */
  readonly fields: DomainFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Domain.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DomainClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subdomains<T extends Domain$subdomainsArgs<ExtArgs> = {}>(args?: Subset<T, Domain$subdomainsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubDomainPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Domain model
   */
  interface DomainFieldRefs {
    readonly id: FieldRef<"Domain", 'Int'>
    readonly domain: FieldRef<"Domain", 'String'>
    readonly createdAt: FieldRef<"Domain", 'DateTime'>
    readonly updatedAt: FieldRef<"Domain", 'DateTime'>
    readonly status: FieldRef<"Domain", 'Boolean'>
    readonly cfId: FieldRef<"Domain", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Domain findUnique
   */
  export type DomainFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domain
     */
    select?: DomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Domain
     */
    omit?: DomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DomainInclude<ExtArgs> | null
    /**
     * Filter, which Domain to fetch.
     */
    where: DomainWhereUniqueInput
  }

  /**
   * Domain findUniqueOrThrow
   */
  export type DomainFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domain
     */
    select?: DomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Domain
     */
    omit?: DomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DomainInclude<ExtArgs> | null
    /**
     * Filter, which Domain to fetch.
     */
    where: DomainWhereUniqueInput
  }

  /**
   * Domain findFirst
   */
  export type DomainFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domain
     */
    select?: DomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Domain
     */
    omit?: DomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DomainInclude<ExtArgs> | null
    /**
     * Filter, which Domain to fetch.
     */
    where?: DomainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Domains to fetch.
     */
    orderBy?: DomainOrderByWithRelationInput | DomainOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Domains.
     */
    cursor?: DomainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Domains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Domains.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Domains.
     */
    distinct?: DomainScalarFieldEnum | DomainScalarFieldEnum[]
  }

  /**
   * Domain findFirstOrThrow
   */
  export type DomainFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domain
     */
    select?: DomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Domain
     */
    omit?: DomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DomainInclude<ExtArgs> | null
    /**
     * Filter, which Domain to fetch.
     */
    where?: DomainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Domains to fetch.
     */
    orderBy?: DomainOrderByWithRelationInput | DomainOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Domains.
     */
    cursor?: DomainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Domains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Domains.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Domains.
     */
    distinct?: DomainScalarFieldEnum | DomainScalarFieldEnum[]
  }

  /**
   * Domain findMany
   */
  export type DomainFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domain
     */
    select?: DomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Domain
     */
    omit?: DomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DomainInclude<ExtArgs> | null
    /**
     * Filter, which Domains to fetch.
     */
    where?: DomainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Domains to fetch.
     */
    orderBy?: DomainOrderByWithRelationInput | DomainOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Domains.
     */
    cursor?: DomainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Domains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Domains.
     */
    skip?: number
    distinct?: DomainScalarFieldEnum | DomainScalarFieldEnum[]
  }

  /**
   * Domain create
   */
  export type DomainCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domain
     */
    select?: DomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Domain
     */
    omit?: DomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DomainInclude<ExtArgs> | null
    /**
     * The data needed to create a Domain.
     */
    data: XOR<DomainCreateInput, DomainUncheckedCreateInput>
  }

  /**
   * Domain createMany
   */
  export type DomainCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Domains.
     */
    data: DomainCreateManyInput | DomainCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Domain createManyAndReturn
   */
  export type DomainCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domain
     */
    select?: DomainSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Domain
     */
    omit?: DomainOmit<ExtArgs> | null
    /**
     * The data used to create many Domains.
     */
    data: DomainCreateManyInput | DomainCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Domain update
   */
  export type DomainUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domain
     */
    select?: DomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Domain
     */
    omit?: DomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DomainInclude<ExtArgs> | null
    /**
     * The data needed to update a Domain.
     */
    data: XOR<DomainUpdateInput, DomainUncheckedUpdateInput>
    /**
     * Choose, which Domain to update.
     */
    where: DomainWhereUniqueInput
  }

  /**
   * Domain updateMany
   */
  export type DomainUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Domains.
     */
    data: XOR<DomainUpdateManyMutationInput, DomainUncheckedUpdateManyInput>
    /**
     * Filter which Domains to update
     */
    where?: DomainWhereInput
    /**
     * Limit how many Domains to update.
     */
    limit?: number
  }

  /**
   * Domain updateManyAndReturn
   */
  export type DomainUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domain
     */
    select?: DomainSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Domain
     */
    omit?: DomainOmit<ExtArgs> | null
    /**
     * The data used to update Domains.
     */
    data: XOR<DomainUpdateManyMutationInput, DomainUncheckedUpdateManyInput>
    /**
     * Filter which Domains to update
     */
    where?: DomainWhereInput
    /**
     * Limit how many Domains to update.
     */
    limit?: number
  }

  /**
   * Domain upsert
   */
  export type DomainUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domain
     */
    select?: DomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Domain
     */
    omit?: DomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DomainInclude<ExtArgs> | null
    /**
     * The filter to search for the Domain to update in case it exists.
     */
    where: DomainWhereUniqueInput
    /**
     * In case the Domain found by the `where` argument doesn't exist, create a new Domain with this data.
     */
    create: XOR<DomainCreateInput, DomainUncheckedCreateInput>
    /**
     * In case the Domain was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DomainUpdateInput, DomainUncheckedUpdateInput>
  }

  /**
   * Domain delete
   */
  export type DomainDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domain
     */
    select?: DomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Domain
     */
    omit?: DomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DomainInclude<ExtArgs> | null
    /**
     * Filter which Domain to delete.
     */
    where: DomainWhereUniqueInput
  }

  /**
   * Domain deleteMany
   */
  export type DomainDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Domains to delete
     */
    where?: DomainWhereInput
    /**
     * Limit how many Domains to delete.
     */
    limit?: number
  }

  /**
   * Domain.subdomains
   */
  export type Domain$subdomainsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubDomain
     */
    select?: SubDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubDomain
     */
    omit?: SubDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubDomainInclude<ExtArgs> | null
    where?: SubDomainWhereInput
    orderBy?: SubDomainOrderByWithRelationInput | SubDomainOrderByWithRelationInput[]
    cursor?: SubDomainWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubDomainScalarFieldEnum | SubDomainScalarFieldEnum[]
  }

  /**
   * Domain without action
   */
  export type DomainDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domain
     */
    select?: DomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Domain
     */
    omit?: DomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DomainInclude<ExtArgs> | null
  }


  /**
   * Model SubDomain
   */

  export type AggregateSubDomain = {
    _count: SubDomainCountAggregateOutputType | null
    _avg: SubDomainAvgAggregateOutputType | null
    _sum: SubDomainSumAggregateOutputType | null
    _min: SubDomainMinAggregateOutputType | null
    _max: SubDomainMaxAggregateOutputType | null
  }

  export type SubDomainAvgAggregateOutputType = {
    id: number | null
    workerId: number | null
    domainId: number | null
    siteId: number | null
  }

  export type SubDomainSumAggregateOutputType = {
    id: number | null
    workerId: number | null
    domainId: number | null
    siteId: number | null
  }

  export type SubDomainMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    workerId: number | null
    domainId: number | null
    siteId: number | null
    prefix: string | null
  }

  export type SubDomainMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    workerId: number | null
    domainId: number | null
    siteId: number | null
    prefix: string | null
  }

  export type SubDomainCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    workerId: number
    domainId: number
    siteId: number
    prefix: number
    _all: number
  }


  export type SubDomainAvgAggregateInputType = {
    id?: true
    workerId?: true
    domainId?: true
    siteId?: true
  }

  export type SubDomainSumAggregateInputType = {
    id?: true
    workerId?: true
    domainId?: true
    siteId?: true
  }

  export type SubDomainMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    workerId?: true
    domainId?: true
    siteId?: true
    prefix?: true
  }

  export type SubDomainMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    workerId?: true
    domainId?: true
    siteId?: true
    prefix?: true
  }

  export type SubDomainCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    workerId?: true
    domainId?: true
    siteId?: true
    prefix?: true
    _all?: true
  }

  export type SubDomainAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubDomain to aggregate.
     */
    where?: SubDomainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubDomains to fetch.
     */
    orderBy?: SubDomainOrderByWithRelationInput | SubDomainOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubDomainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubDomains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubDomains.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SubDomains
    **/
    _count?: true | SubDomainCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubDomainAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubDomainSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubDomainMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubDomainMaxAggregateInputType
  }

  export type GetSubDomainAggregateType<T extends SubDomainAggregateArgs> = {
        [P in keyof T & keyof AggregateSubDomain]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubDomain[P]>
      : GetScalarType<T[P], AggregateSubDomain[P]>
  }




  export type SubDomainGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubDomainWhereInput
    orderBy?: SubDomainOrderByWithAggregationInput | SubDomainOrderByWithAggregationInput[]
    by: SubDomainScalarFieldEnum[] | SubDomainScalarFieldEnum
    having?: SubDomainScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubDomainCountAggregateInputType | true
    _avg?: SubDomainAvgAggregateInputType
    _sum?: SubDomainSumAggregateInputType
    _min?: SubDomainMinAggregateInputType
    _max?: SubDomainMaxAggregateInputType
  }

  export type SubDomainGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    workerId: number | null
    domainId: number | null
    siteId: number | null
    prefix: string
    _count: SubDomainCountAggregateOutputType | null
    _avg: SubDomainAvgAggregateOutputType | null
    _sum: SubDomainSumAggregateOutputType | null
    _min: SubDomainMinAggregateOutputType | null
    _max: SubDomainMaxAggregateOutputType | null
  }

  type GetSubDomainGroupByPayload<T extends SubDomainGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubDomainGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubDomainGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubDomainGroupByOutputType[P]>
            : GetScalarType<T[P], SubDomainGroupByOutputType[P]>
        }
      >
    >


  export type SubDomainSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workerId?: boolean
    domainId?: boolean
    siteId?: boolean
    prefix?: boolean
    worker?: boolean | SubDomain$workerArgs<ExtArgs>
    domain?: boolean | SubDomain$domainArgs<ExtArgs>
    logs?: boolean | SubDomain$logsArgs<ExtArgs>
    site?: boolean | SubDomain$siteArgs<ExtArgs>
    _count?: boolean | SubDomainCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subDomain"]>

  export type SubDomainSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workerId?: boolean
    domainId?: boolean
    siteId?: boolean
    prefix?: boolean
    worker?: boolean | SubDomain$workerArgs<ExtArgs>
    domain?: boolean | SubDomain$domainArgs<ExtArgs>
    site?: boolean | SubDomain$siteArgs<ExtArgs>
  }, ExtArgs["result"]["subDomain"]>

  export type SubDomainSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workerId?: boolean
    domainId?: boolean
    siteId?: boolean
    prefix?: boolean
    worker?: boolean | SubDomain$workerArgs<ExtArgs>
    domain?: boolean | SubDomain$domainArgs<ExtArgs>
    site?: boolean | SubDomain$siteArgs<ExtArgs>
  }, ExtArgs["result"]["subDomain"]>

  export type SubDomainSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workerId?: boolean
    domainId?: boolean
    siteId?: boolean
    prefix?: boolean
  }

  export type SubDomainOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "workerId" | "domainId" | "siteId" | "prefix", ExtArgs["result"]["subDomain"]>
  export type SubDomainInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    worker?: boolean | SubDomain$workerArgs<ExtArgs>
    domain?: boolean | SubDomain$domainArgs<ExtArgs>
    logs?: boolean | SubDomain$logsArgs<ExtArgs>
    site?: boolean | SubDomain$siteArgs<ExtArgs>
    _count?: boolean | SubDomainCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SubDomainIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    worker?: boolean | SubDomain$workerArgs<ExtArgs>
    domain?: boolean | SubDomain$domainArgs<ExtArgs>
    site?: boolean | SubDomain$siteArgs<ExtArgs>
  }
  export type SubDomainIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    worker?: boolean | SubDomain$workerArgs<ExtArgs>
    domain?: boolean | SubDomain$domainArgs<ExtArgs>
    site?: boolean | SubDomain$siteArgs<ExtArgs>
  }

  export type $SubDomainPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SubDomain"
    objects: {
      worker: Prisma.$WorkerPayload<ExtArgs> | null
      domain: Prisma.$DomainPayload<ExtArgs> | null
      logs: Prisma.$LogPayload<ExtArgs>[]
      site: Prisma.$SitePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updatedAt: Date
      workerId: number | null
      domainId: number | null
      siteId: number | null
      prefix: string
    }, ExtArgs["result"]["subDomain"]>
    composites: {}
  }

  type SubDomainGetPayload<S extends boolean | null | undefined | SubDomainDefaultArgs> = $Result.GetResult<Prisma.$SubDomainPayload, S>

  type SubDomainCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubDomainFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubDomainCountAggregateInputType | true
    }

  export interface SubDomainDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SubDomain'], meta: { name: 'SubDomain' } }
    /**
     * Find zero or one SubDomain that matches the filter.
     * @param {SubDomainFindUniqueArgs} args - Arguments to find a SubDomain
     * @example
     * // Get one SubDomain
     * const subDomain = await prisma.subDomain.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubDomainFindUniqueArgs>(args: SelectSubset<T, SubDomainFindUniqueArgs<ExtArgs>>): Prisma__SubDomainClient<$Result.GetResult<Prisma.$SubDomainPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SubDomain that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubDomainFindUniqueOrThrowArgs} args - Arguments to find a SubDomain
     * @example
     * // Get one SubDomain
     * const subDomain = await prisma.subDomain.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubDomainFindUniqueOrThrowArgs>(args: SelectSubset<T, SubDomainFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubDomainClient<$Result.GetResult<Prisma.$SubDomainPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SubDomain that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubDomainFindFirstArgs} args - Arguments to find a SubDomain
     * @example
     * // Get one SubDomain
     * const subDomain = await prisma.subDomain.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubDomainFindFirstArgs>(args?: SelectSubset<T, SubDomainFindFirstArgs<ExtArgs>>): Prisma__SubDomainClient<$Result.GetResult<Prisma.$SubDomainPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SubDomain that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubDomainFindFirstOrThrowArgs} args - Arguments to find a SubDomain
     * @example
     * // Get one SubDomain
     * const subDomain = await prisma.subDomain.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubDomainFindFirstOrThrowArgs>(args?: SelectSubset<T, SubDomainFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubDomainClient<$Result.GetResult<Prisma.$SubDomainPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SubDomains that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubDomainFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SubDomains
     * const subDomains = await prisma.subDomain.findMany()
     * 
     * // Get first 10 SubDomains
     * const subDomains = await prisma.subDomain.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subDomainWithIdOnly = await prisma.subDomain.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubDomainFindManyArgs>(args?: SelectSubset<T, SubDomainFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubDomainPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SubDomain.
     * @param {SubDomainCreateArgs} args - Arguments to create a SubDomain.
     * @example
     * // Create one SubDomain
     * const SubDomain = await prisma.subDomain.create({
     *   data: {
     *     // ... data to create a SubDomain
     *   }
     * })
     * 
     */
    create<T extends SubDomainCreateArgs>(args: SelectSubset<T, SubDomainCreateArgs<ExtArgs>>): Prisma__SubDomainClient<$Result.GetResult<Prisma.$SubDomainPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SubDomains.
     * @param {SubDomainCreateManyArgs} args - Arguments to create many SubDomains.
     * @example
     * // Create many SubDomains
     * const subDomain = await prisma.subDomain.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubDomainCreateManyArgs>(args?: SelectSubset<T, SubDomainCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SubDomains and returns the data saved in the database.
     * @param {SubDomainCreateManyAndReturnArgs} args - Arguments to create many SubDomains.
     * @example
     * // Create many SubDomains
     * const subDomain = await prisma.subDomain.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SubDomains and only return the `id`
     * const subDomainWithIdOnly = await prisma.subDomain.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubDomainCreateManyAndReturnArgs>(args?: SelectSubset<T, SubDomainCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubDomainPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SubDomain.
     * @param {SubDomainDeleteArgs} args - Arguments to delete one SubDomain.
     * @example
     * // Delete one SubDomain
     * const SubDomain = await prisma.subDomain.delete({
     *   where: {
     *     // ... filter to delete one SubDomain
     *   }
     * })
     * 
     */
    delete<T extends SubDomainDeleteArgs>(args: SelectSubset<T, SubDomainDeleteArgs<ExtArgs>>): Prisma__SubDomainClient<$Result.GetResult<Prisma.$SubDomainPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SubDomain.
     * @param {SubDomainUpdateArgs} args - Arguments to update one SubDomain.
     * @example
     * // Update one SubDomain
     * const subDomain = await prisma.subDomain.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubDomainUpdateArgs>(args: SelectSubset<T, SubDomainUpdateArgs<ExtArgs>>): Prisma__SubDomainClient<$Result.GetResult<Prisma.$SubDomainPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SubDomains.
     * @param {SubDomainDeleteManyArgs} args - Arguments to filter SubDomains to delete.
     * @example
     * // Delete a few SubDomains
     * const { count } = await prisma.subDomain.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubDomainDeleteManyArgs>(args?: SelectSubset<T, SubDomainDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubDomains.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubDomainUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SubDomains
     * const subDomain = await prisma.subDomain.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubDomainUpdateManyArgs>(args: SelectSubset<T, SubDomainUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubDomains and returns the data updated in the database.
     * @param {SubDomainUpdateManyAndReturnArgs} args - Arguments to update many SubDomains.
     * @example
     * // Update many SubDomains
     * const subDomain = await prisma.subDomain.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SubDomains and only return the `id`
     * const subDomainWithIdOnly = await prisma.subDomain.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SubDomainUpdateManyAndReturnArgs>(args: SelectSubset<T, SubDomainUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubDomainPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SubDomain.
     * @param {SubDomainUpsertArgs} args - Arguments to update or create a SubDomain.
     * @example
     * // Update or create a SubDomain
     * const subDomain = await prisma.subDomain.upsert({
     *   create: {
     *     // ... data to create a SubDomain
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SubDomain we want to update
     *   }
     * })
     */
    upsert<T extends SubDomainUpsertArgs>(args: SelectSubset<T, SubDomainUpsertArgs<ExtArgs>>): Prisma__SubDomainClient<$Result.GetResult<Prisma.$SubDomainPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SubDomains.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubDomainCountArgs} args - Arguments to filter SubDomains to count.
     * @example
     * // Count the number of SubDomains
     * const count = await prisma.subDomain.count({
     *   where: {
     *     // ... the filter for the SubDomains we want to count
     *   }
     * })
    **/
    count<T extends SubDomainCountArgs>(
      args?: Subset<T, SubDomainCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubDomainCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SubDomain.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubDomainAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubDomainAggregateArgs>(args: Subset<T, SubDomainAggregateArgs>): Prisma.PrismaPromise<GetSubDomainAggregateType<T>>

    /**
     * Group by SubDomain.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubDomainGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubDomainGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubDomainGroupByArgs['orderBy'] }
        : { orderBy?: SubDomainGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubDomainGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubDomainGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SubDomain model
   */
  readonly fields: SubDomainFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SubDomain.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubDomainClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    worker<T extends SubDomain$workerArgs<ExtArgs> = {}>(args?: Subset<T, SubDomain$workerArgs<ExtArgs>>): Prisma__WorkerClient<$Result.GetResult<Prisma.$WorkerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    domain<T extends SubDomain$domainArgs<ExtArgs> = {}>(args?: Subset<T, SubDomain$domainArgs<ExtArgs>>): Prisma__DomainClient<$Result.GetResult<Prisma.$DomainPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    logs<T extends SubDomain$logsArgs<ExtArgs> = {}>(args?: Subset<T, SubDomain$logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    site<T extends SubDomain$siteArgs<ExtArgs> = {}>(args?: Subset<T, SubDomain$siteArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SubDomain model
   */
  interface SubDomainFieldRefs {
    readonly id: FieldRef<"SubDomain", 'Int'>
    readonly createdAt: FieldRef<"SubDomain", 'DateTime'>
    readonly updatedAt: FieldRef<"SubDomain", 'DateTime'>
    readonly workerId: FieldRef<"SubDomain", 'Int'>
    readonly domainId: FieldRef<"SubDomain", 'Int'>
    readonly siteId: FieldRef<"SubDomain", 'Int'>
    readonly prefix: FieldRef<"SubDomain", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SubDomain findUnique
   */
  export type SubDomainFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubDomain
     */
    select?: SubDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubDomain
     */
    omit?: SubDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubDomainInclude<ExtArgs> | null
    /**
     * Filter, which SubDomain to fetch.
     */
    where: SubDomainWhereUniqueInput
  }

  /**
   * SubDomain findUniqueOrThrow
   */
  export type SubDomainFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubDomain
     */
    select?: SubDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubDomain
     */
    omit?: SubDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubDomainInclude<ExtArgs> | null
    /**
     * Filter, which SubDomain to fetch.
     */
    where: SubDomainWhereUniqueInput
  }

  /**
   * SubDomain findFirst
   */
  export type SubDomainFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubDomain
     */
    select?: SubDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubDomain
     */
    omit?: SubDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubDomainInclude<ExtArgs> | null
    /**
     * Filter, which SubDomain to fetch.
     */
    where?: SubDomainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubDomains to fetch.
     */
    orderBy?: SubDomainOrderByWithRelationInput | SubDomainOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubDomains.
     */
    cursor?: SubDomainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubDomains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubDomains.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubDomains.
     */
    distinct?: SubDomainScalarFieldEnum | SubDomainScalarFieldEnum[]
  }

  /**
   * SubDomain findFirstOrThrow
   */
  export type SubDomainFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubDomain
     */
    select?: SubDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubDomain
     */
    omit?: SubDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubDomainInclude<ExtArgs> | null
    /**
     * Filter, which SubDomain to fetch.
     */
    where?: SubDomainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubDomains to fetch.
     */
    orderBy?: SubDomainOrderByWithRelationInput | SubDomainOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubDomains.
     */
    cursor?: SubDomainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubDomains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubDomains.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubDomains.
     */
    distinct?: SubDomainScalarFieldEnum | SubDomainScalarFieldEnum[]
  }

  /**
   * SubDomain findMany
   */
  export type SubDomainFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubDomain
     */
    select?: SubDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubDomain
     */
    omit?: SubDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubDomainInclude<ExtArgs> | null
    /**
     * Filter, which SubDomains to fetch.
     */
    where?: SubDomainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubDomains to fetch.
     */
    orderBy?: SubDomainOrderByWithRelationInput | SubDomainOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SubDomains.
     */
    cursor?: SubDomainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubDomains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubDomains.
     */
    skip?: number
    distinct?: SubDomainScalarFieldEnum | SubDomainScalarFieldEnum[]
  }

  /**
   * SubDomain create
   */
  export type SubDomainCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubDomain
     */
    select?: SubDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubDomain
     */
    omit?: SubDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubDomainInclude<ExtArgs> | null
    /**
     * The data needed to create a SubDomain.
     */
    data: XOR<SubDomainCreateInput, SubDomainUncheckedCreateInput>
  }

  /**
   * SubDomain createMany
   */
  export type SubDomainCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SubDomains.
     */
    data: SubDomainCreateManyInput | SubDomainCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SubDomain createManyAndReturn
   */
  export type SubDomainCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubDomain
     */
    select?: SubDomainSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SubDomain
     */
    omit?: SubDomainOmit<ExtArgs> | null
    /**
     * The data used to create many SubDomains.
     */
    data: SubDomainCreateManyInput | SubDomainCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubDomainIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SubDomain update
   */
  export type SubDomainUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubDomain
     */
    select?: SubDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubDomain
     */
    omit?: SubDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubDomainInclude<ExtArgs> | null
    /**
     * The data needed to update a SubDomain.
     */
    data: XOR<SubDomainUpdateInput, SubDomainUncheckedUpdateInput>
    /**
     * Choose, which SubDomain to update.
     */
    where: SubDomainWhereUniqueInput
  }

  /**
   * SubDomain updateMany
   */
  export type SubDomainUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SubDomains.
     */
    data: XOR<SubDomainUpdateManyMutationInput, SubDomainUncheckedUpdateManyInput>
    /**
     * Filter which SubDomains to update
     */
    where?: SubDomainWhereInput
    /**
     * Limit how many SubDomains to update.
     */
    limit?: number
  }

  /**
   * SubDomain updateManyAndReturn
   */
  export type SubDomainUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubDomain
     */
    select?: SubDomainSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SubDomain
     */
    omit?: SubDomainOmit<ExtArgs> | null
    /**
     * The data used to update SubDomains.
     */
    data: XOR<SubDomainUpdateManyMutationInput, SubDomainUncheckedUpdateManyInput>
    /**
     * Filter which SubDomains to update
     */
    where?: SubDomainWhereInput
    /**
     * Limit how many SubDomains to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubDomainIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SubDomain upsert
   */
  export type SubDomainUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubDomain
     */
    select?: SubDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubDomain
     */
    omit?: SubDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubDomainInclude<ExtArgs> | null
    /**
     * The filter to search for the SubDomain to update in case it exists.
     */
    where: SubDomainWhereUniqueInput
    /**
     * In case the SubDomain found by the `where` argument doesn't exist, create a new SubDomain with this data.
     */
    create: XOR<SubDomainCreateInput, SubDomainUncheckedCreateInput>
    /**
     * In case the SubDomain was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubDomainUpdateInput, SubDomainUncheckedUpdateInput>
  }

  /**
   * SubDomain delete
   */
  export type SubDomainDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubDomain
     */
    select?: SubDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubDomain
     */
    omit?: SubDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubDomainInclude<ExtArgs> | null
    /**
     * Filter which SubDomain to delete.
     */
    where: SubDomainWhereUniqueInput
  }

  /**
   * SubDomain deleteMany
   */
  export type SubDomainDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubDomains to delete
     */
    where?: SubDomainWhereInput
    /**
     * Limit how many SubDomains to delete.
     */
    limit?: number
  }

  /**
   * SubDomain.worker
   */
  export type SubDomain$workerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Worker
     */
    select?: WorkerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Worker
     */
    omit?: WorkerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkerInclude<ExtArgs> | null
    where?: WorkerWhereInput
  }

  /**
   * SubDomain.domain
   */
  export type SubDomain$domainArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domain
     */
    select?: DomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Domain
     */
    omit?: DomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DomainInclude<ExtArgs> | null
    where?: DomainWhereInput
  }

  /**
   * SubDomain.logs
   */
  export type SubDomain$logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    where?: LogWhereInput
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    cursor?: LogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * SubDomain.site
   */
  export type SubDomain$siteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Site
     */
    omit?: SiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    where?: SiteWhereInput
  }

  /**
   * SubDomain without action
   */
  export type SubDomainDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubDomain
     */
    select?: SubDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubDomain
     */
    omit?: SubDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubDomainInclude<ExtArgs> | null
  }


  /**
   * Model Site
   */

  export type AggregateSite = {
    _count: SiteCountAggregateOutputType | null
    _avg: SiteAvgAggregateOutputType | null
    _sum: SiteSumAggregateOutputType | null
    _min: SiteMinAggregateOutputType | null
    _max: SiteMaxAggregateOutputType | null
  }

  export type SiteAvgAggregateOutputType = {
    id: number | null
  }

  export type SiteSumAggregateOutputType = {
    id: number | null
  }

  export type SiteMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    ip: string | null
    name: string | null
    status: boolean | null
  }

  export type SiteMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    ip: string | null
    name: string | null
    status: boolean | null
  }

  export type SiteCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    ip: number
    name: number
    status: number
    _all: number
  }


  export type SiteAvgAggregateInputType = {
    id?: true
  }

  export type SiteSumAggregateInputType = {
    id?: true
  }

  export type SiteMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    ip?: true
    name?: true
    status?: true
  }

  export type SiteMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    ip?: true
    name?: true
    status?: true
  }

  export type SiteCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    ip?: true
    name?: true
    status?: true
    _all?: true
  }

  export type SiteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Site to aggregate.
     */
    where?: SiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sites to fetch.
     */
    orderBy?: SiteOrderByWithRelationInput | SiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sites
    **/
    _count?: true | SiteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SiteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SiteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SiteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SiteMaxAggregateInputType
  }

  export type GetSiteAggregateType<T extends SiteAggregateArgs> = {
        [P in keyof T & keyof AggregateSite]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSite[P]>
      : GetScalarType<T[P], AggregateSite[P]>
  }




  export type SiteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SiteWhereInput
    orderBy?: SiteOrderByWithAggregationInput | SiteOrderByWithAggregationInput[]
    by: SiteScalarFieldEnum[] | SiteScalarFieldEnum
    having?: SiteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SiteCountAggregateInputType | true
    _avg?: SiteAvgAggregateInputType
    _sum?: SiteSumAggregateInputType
    _min?: SiteMinAggregateInputType
    _max?: SiteMaxAggregateInputType
  }

  export type SiteGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    ip: string
    name: string | null
    status: boolean
    _count: SiteCountAggregateOutputType | null
    _avg: SiteAvgAggregateOutputType | null
    _sum: SiteSumAggregateOutputType | null
    _min: SiteMinAggregateOutputType | null
    _max: SiteMaxAggregateOutputType | null
  }

  type GetSiteGroupByPayload<T extends SiteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SiteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SiteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SiteGroupByOutputType[P]>
            : GetScalarType<T[P], SiteGroupByOutputType[P]>
        }
      >
    >


  export type SiteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ip?: boolean
    name?: boolean
    status?: boolean
    subDomain?: boolean | Site$subDomainArgs<ExtArgs>
    _count?: boolean | SiteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["site"]>

  export type SiteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ip?: boolean
    name?: boolean
    status?: boolean
  }, ExtArgs["result"]["site"]>

  export type SiteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ip?: boolean
    name?: boolean
    status?: boolean
  }, ExtArgs["result"]["site"]>

  export type SiteSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ip?: boolean
    name?: boolean
    status?: boolean
  }

  export type SiteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "ip" | "name" | "status", ExtArgs["result"]["site"]>
  export type SiteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subDomain?: boolean | Site$subDomainArgs<ExtArgs>
    _count?: boolean | SiteCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SiteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type SiteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SitePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Site"
    objects: {
      subDomain: Prisma.$SubDomainPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updatedAt: Date
      ip: string
      name: string | null
      status: boolean
    }, ExtArgs["result"]["site"]>
    composites: {}
  }

  type SiteGetPayload<S extends boolean | null | undefined | SiteDefaultArgs> = $Result.GetResult<Prisma.$SitePayload, S>

  type SiteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SiteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SiteCountAggregateInputType | true
    }

  export interface SiteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Site'], meta: { name: 'Site' } }
    /**
     * Find zero or one Site that matches the filter.
     * @param {SiteFindUniqueArgs} args - Arguments to find a Site
     * @example
     * // Get one Site
     * const site = await prisma.site.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SiteFindUniqueArgs>(args: SelectSubset<T, SiteFindUniqueArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Site that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SiteFindUniqueOrThrowArgs} args - Arguments to find a Site
     * @example
     * // Get one Site
     * const site = await prisma.site.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SiteFindUniqueOrThrowArgs>(args: SelectSubset<T, SiteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Site that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteFindFirstArgs} args - Arguments to find a Site
     * @example
     * // Get one Site
     * const site = await prisma.site.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SiteFindFirstArgs>(args?: SelectSubset<T, SiteFindFirstArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Site that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteFindFirstOrThrowArgs} args - Arguments to find a Site
     * @example
     * // Get one Site
     * const site = await prisma.site.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SiteFindFirstOrThrowArgs>(args?: SelectSubset<T, SiteFindFirstOrThrowArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sites
     * const sites = await prisma.site.findMany()
     * 
     * // Get first 10 Sites
     * const sites = await prisma.site.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const siteWithIdOnly = await prisma.site.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SiteFindManyArgs>(args?: SelectSubset<T, SiteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Site.
     * @param {SiteCreateArgs} args - Arguments to create a Site.
     * @example
     * // Create one Site
     * const Site = await prisma.site.create({
     *   data: {
     *     // ... data to create a Site
     *   }
     * })
     * 
     */
    create<T extends SiteCreateArgs>(args: SelectSubset<T, SiteCreateArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sites.
     * @param {SiteCreateManyArgs} args - Arguments to create many Sites.
     * @example
     * // Create many Sites
     * const site = await prisma.site.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SiteCreateManyArgs>(args?: SelectSubset<T, SiteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sites and returns the data saved in the database.
     * @param {SiteCreateManyAndReturnArgs} args - Arguments to create many Sites.
     * @example
     * // Create many Sites
     * const site = await prisma.site.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sites and only return the `id`
     * const siteWithIdOnly = await prisma.site.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SiteCreateManyAndReturnArgs>(args?: SelectSubset<T, SiteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Site.
     * @param {SiteDeleteArgs} args - Arguments to delete one Site.
     * @example
     * // Delete one Site
     * const Site = await prisma.site.delete({
     *   where: {
     *     // ... filter to delete one Site
     *   }
     * })
     * 
     */
    delete<T extends SiteDeleteArgs>(args: SelectSubset<T, SiteDeleteArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Site.
     * @param {SiteUpdateArgs} args - Arguments to update one Site.
     * @example
     * // Update one Site
     * const site = await prisma.site.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SiteUpdateArgs>(args: SelectSubset<T, SiteUpdateArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sites.
     * @param {SiteDeleteManyArgs} args - Arguments to filter Sites to delete.
     * @example
     * // Delete a few Sites
     * const { count } = await prisma.site.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SiteDeleteManyArgs>(args?: SelectSubset<T, SiteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sites
     * const site = await prisma.site.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SiteUpdateManyArgs>(args: SelectSubset<T, SiteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sites and returns the data updated in the database.
     * @param {SiteUpdateManyAndReturnArgs} args - Arguments to update many Sites.
     * @example
     * // Update many Sites
     * const site = await prisma.site.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sites and only return the `id`
     * const siteWithIdOnly = await prisma.site.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SiteUpdateManyAndReturnArgs>(args: SelectSubset<T, SiteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Site.
     * @param {SiteUpsertArgs} args - Arguments to update or create a Site.
     * @example
     * // Update or create a Site
     * const site = await prisma.site.upsert({
     *   create: {
     *     // ... data to create a Site
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Site we want to update
     *   }
     * })
     */
    upsert<T extends SiteUpsertArgs>(args: SelectSubset<T, SiteUpsertArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteCountArgs} args - Arguments to filter Sites to count.
     * @example
     * // Count the number of Sites
     * const count = await prisma.site.count({
     *   where: {
     *     // ... the filter for the Sites we want to count
     *   }
     * })
    **/
    count<T extends SiteCountArgs>(
      args?: Subset<T, SiteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SiteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Site.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SiteAggregateArgs>(args: Subset<T, SiteAggregateArgs>): Prisma.PrismaPromise<GetSiteAggregateType<T>>

    /**
     * Group by Site.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SiteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SiteGroupByArgs['orderBy'] }
        : { orderBy?: SiteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SiteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSiteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Site model
   */
  readonly fields: SiteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Site.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SiteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subDomain<T extends Site$subDomainArgs<ExtArgs> = {}>(args?: Subset<T, Site$subDomainArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubDomainPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Site model
   */
  interface SiteFieldRefs {
    readonly id: FieldRef<"Site", 'Int'>
    readonly createdAt: FieldRef<"Site", 'DateTime'>
    readonly updatedAt: FieldRef<"Site", 'DateTime'>
    readonly ip: FieldRef<"Site", 'String'>
    readonly name: FieldRef<"Site", 'String'>
    readonly status: FieldRef<"Site", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Site findUnique
   */
  export type SiteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Site
     */
    omit?: SiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * Filter, which Site to fetch.
     */
    where: SiteWhereUniqueInput
  }

  /**
   * Site findUniqueOrThrow
   */
  export type SiteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Site
     */
    omit?: SiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * Filter, which Site to fetch.
     */
    where: SiteWhereUniqueInput
  }

  /**
   * Site findFirst
   */
  export type SiteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Site
     */
    omit?: SiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * Filter, which Site to fetch.
     */
    where?: SiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sites to fetch.
     */
    orderBy?: SiteOrderByWithRelationInput | SiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sites.
     */
    cursor?: SiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sites.
     */
    distinct?: SiteScalarFieldEnum | SiteScalarFieldEnum[]
  }

  /**
   * Site findFirstOrThrow
   */
  export type SiteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Site
     */
    omit?: SiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * Filter, which Site to fetch.
     */
    where?: SiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sites to fetch.
     */
    orderBy?: SiteOrderByWithRelationInput | SiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sites.
     */
    cursor?: SiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sites.
     */
    distinct?: SiteScalarFieldEnum | SiteScalarFieldEnum[]
  }

  /**
   * Site findMany
   */
  export type SiteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Site
     */
    omit?: SiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * Filter, which Sites to fetch.
     */
    where?: SiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sites to fetch.
     */
    orderBy?: SiteOrderByWithRelationInput | SiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sites.
     */
    cursor?: SiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sites.
     */
    skip?: number
    distinct?: SiteScalarFieldEnum | SiteScalarFieldEnum[]
  }

  /**
   * Site create
   */
  export type SiteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Site
     */
    omit?: SiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * The data needed to create a Site.
     */
    data: XOR<SiteCreateInput, SiteUncheckedCreateInput>
  }

  /**
   * Site createMany
   */
  export type SiteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sites.
     */
    data: SiteCreateManyInput | SiteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Site createManyAndReturn
   */
  export type SiteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Site
     */
    omit?: SiteOmit<ExtArgs> | null
    /**
     * The data used to create many Sites.
     */
    data: SiteCreateManyInput | SiteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Site update
   */
  export type SiteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Site
     */
    omit?: SiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * The data needed to update a Site.
     */
    data: XOR<SiteUpdateInput, SiteUncheckedUpdateInput>
    /**
     * Choose, which Site to update.
     */
    where: SiteWhereUniqueInput
  }

  /**
   * Site updateMany
   */
  export type SiteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sites.
     */
    data: XOR<SiteUpdateManyMutationInput, SiteUncheckedUpdateManyInput>
    /**
     * Filter which Sites to update
     */
    where?: SiteWhereInput
    /**
     * Limit how many Sites to update.
     */
    limit?: number
  }

  /**
   * Site updateManyAndReturn
   */
  export type SiteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Site
     */
    omit?: SiteOmit<ExtArgs> | null
    /**
     * The data used to update Sites.
     */
    data: XOR<SiteUpdateManyMutationInput, SiteUncheckedUpdateManyInput>
    /**
     * Filter which Sites to update
     */
    where?: SiteWhereInput
    /**
     * Limit how many Sites to update.
     */
    limit?: number
  }

  /**
   * Site upsert
   */
  export type SiteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Site
     */
    omit?: SiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * The filter to search for the Site to update in case it exists.
     */
    where: SiteWhereUniqueInput
    /**
     * In case the Site found by the `where` argument doesn't exist, create a new Site with this data.
     */
    create: XOR<SiteCreateInput, SiteUncheckedCreateInput>
    /**
     * In case the Site was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SiteUpdateInput, SiteUncheckedUpdateInput>
  }

  /**
   * Site delete
   */
  export type SiteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Site
     */
    omit?: SiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * Filter which Site to delete.
     */
    where: SiteWhereUniqueInput
  }

  /**
   * Site deleteMany
   */
  export type SiteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sites to delete
     */
    where?: SiteWhereInput
    /**
     * Limit how many Sites to delete.
     */
    limit?: number
  }

  /**
   * Site.subDomain
   */
  export type Site$subDomainArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubDomain
     */
    select?: SubDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubDomain
     */
    omit?: SubDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubDomainInclude<ExtArgs> | null
    where?: SubDomainWhereInput
    orderBy?: SubDomainOrderByWithRelationInput | SubDomainOrderByWithRelationInput[]
    cursor?: SubDomainWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubDomainScalarFieldEnum | SubDomainScalarFieldEnum[]
  }

  /**
   * Site without action
   */
  export type SiteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Site
     */
    omit?: SiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
  }


  /**
   * Model Log
   */

  export type AggregateLog = {
    _count: LogCountAggregateOutputType | null
    _avg: LogAvgAggregateOutputType | null
    _sum: LogSumAggregateOutputType | null
    _min: LogMinAggregateOutputType | null
    _max: LogMaxAggregateOutputType | null
  }

  export type LogAvgAggregateOutputType = {
    id: number | null
    workerId: number | null
    subDomainId: number | null
  }

  export type LogSumAggregateOutputType = {
    id: number | null
    workerId: number | null
    subDomainId: number | null
  }

  export type LogMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    comment: string | null
    ip: string | null
    userAgent: string | null
    workerId: number | null
    subDomainId: number | null
    passCodeId: string | null
  }

  export type LogMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    comment: string | null
    ip: string | null
    userAgent: string | null
    workerId: number | null
    subDomainId: number | null
    passCodeId: string | null
  }

  export type LogCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    comment: number
    ip: number
    userAgent: number
    workerId: number
    subDomainId: number
    passCodeId: number
    _all: number
  }


  export type LogAvgAggregateInputType = {
    id?: true
    workerId?: true
    subDomainId?: true
  }

  export type LogSumAggregateInputType = {
    id?: true
    workerId?: true
    subDomainId?: true
  }

  export type LogMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    comment?: true
    ip?: true
    userAgent?: true
    workerId?: true
    subDomainId?: true
    passCodeId?: true
  }

  export type LogMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    comment?: true
    ip?: true
    userAgent?: true
    workerId?: true
    subDomainId?: true
    passCodeId?: true
  }

  export type LogCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    comment?: true
    ip?: true
    userAgent?: true
    workerId?: true
    subDomainId?: true
    passCodeId?: true
    _all?: true
  }

  export type LogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Log to aggregate.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Logs
    **/
    _count?: true | LogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LogMaxAggregateInputType
  }

  export type GetLogAggregateType<T extends LogAggregateArgs> = {
        [P in keyof T & keyof AggregateLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLog[P]>
      : GetScalarType<T[P], AggregateLog[P]>
  }




  export type LogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogWhereInput
    orderBy?: LogOrderByWithAggregationInput | LogOrderByWithAggregationInput[]
    by: LogScalarFieldEnum[] | LogScalarFieldEnum
    having?: LogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LogCountAggregateInputType | true
    _avg?: LogAvgAggregateInputType
    _sum?: LogSumAggregateInputType
    _min?: LogMinAggregateInputType
    _max?: LogMaxAggregateInputType
  }

  export type LogGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    comment: string | null
    ip: string | null
    userAgent: string | null
    workerId: number | null
    subDomainId: number | null
    passCodeId: string | null
    _count: LogCountAggregateOutputType | null
    _avg: LogAvgAggregateOutputType | null
    _sum: LogSumAggregateOutputType | null
    _min: LogMinAggregateOutputType | null
    _max: LogMaxAggregateOutputType | null
  }

  type GetLogGroupByPayload<T extends LogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LogGroupByOutputType[P]>
            : GetScalarType<T[P], LogGroupByOutputType[P]>
        }
      >
    >


  export type LogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    comment?: boolean
    ip?: boolean
    userAgent?: boolean
    workerId?: boolean
    subDomainId?: boolean
    passCodeId?: boolean
    worker?: boolean | Log$workerArgs<ExtArgs>
    subDomain?: boolean | Log$subDomainArgs<ExtArgs>
    passCode?: boolean | Log$passCodeArgs<ExtArgs>
  }, ExtArgs["result"]["log"]>

  export type LogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    comment?: boolean
    ip?: boolean
    userAgent?: boolean
    workerId?: boolean
    subDomainId?: boolean
    passCodeId?: boolean
    worker?: boolean | Log$workerArgs<ExtArgs>
    subDomain?: boolean | Log$subDomainArgs<ExtArgs>
    passCode?: boolean | Log$passCodeArgs<ExtArgs>
  }, ExtArgs["result"]["log"]>

  export type LogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    comment?: boolean
    ip?: boolean
    userAgent?: boolean
    workerId?: boolean
    subDomainId?: boolean
    passCodeId?: boolean
    worker?: boolean | Log$workerArgs<ExtArgs>
    subDomain?: boolean | Log$subDomainArgs<ExtArgs>
    passCode?: boolean | Log$passCodeArgs<ExtArgs>
  }, ExtArgs["result"]["log"]>

  export type LogSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    comment?: boolean
    ip?: boolean
    userAgent?: boolean
    workerId?: boolean
    subDomainId?: boolean
    passCodeId?: boolean
  }

  export type LogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "comment" | "ip" | "userAgent" | "workerId" | "subDomainId" | "passCodeId", ExtArgs["result"]["log"]>
  export type LogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    worker?: boolean | Log$workerArgs<ExtArgs>
    subDomain?: boolean | Log$subDomainArgs<ExtArgs>
    passCode?: boolean | Log$passCodeArgs<ExtArgs>
  }
  export type LogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    worker?: boolean | Log$workerArgs<ExtArgs>
    subDomain?: boolean | Log$subDomainArgs<ExtArgs>
    passCode?: boolean | Log$passCodeArgs<ExtArgs>
  }
  export type LogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    worker?: boolean | Log$workerArgs<ExtArgs>
    subDomain?: boolean | Log$subDomainArgs<ExtArgs>
    passCode?: boolean | Log$passCodeArgs<ExtArgs>
  }

  export type $LogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Log"
    objects: {
      worker: Prisma.$WorkerPayload<ExtArgs> | null
      subDomain: Prisma.$SubDomainPayload<ExtArgs> | null
      passCode: Prisma.$PassCodePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updatedAt: Date
      comment: string | null
      ip: string | null
      userAgent: string | null
      workerId: number | null
      subDomainId: number | null
      passCodeId: string | null
    }, ExtArgs["result"]["log"]>
    composites: {}
  }

  type LogGetPayload<S extends boolean | null | undefined | LogDefaultArgs> = $Result.GetResult<Prisma.$LogPayload, S>

  type LogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LogCountAggregateInputType | true
    }

  export interface LogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Log'], meta: { name: 'Log' } }
    /**
     * Find zero or one Log that matches the filter.
     * @param {LogFindUniqueArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LogFindUniqueArgs>(args: SelectSubset<T, LogFindUniqueArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Log that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LogFindUniqueOrThrowArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LogFindUniqueOrThrowArgs>(args: SelectSubset<T, LogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Log that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogFindFirstArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LogFindFirstArgs>(args?: SelectSubset<T, LogFindFirstArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Log that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogFindFirstOrThrowArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LogFindFirstOrThrowArgs>(args?: SelectSubset<T, LogFindFirstOrThrowArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Logs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Logs
     * const logs = await prisma.log.findMany()
     * 
     * // Get first 10 Logs
     * const logs = await prisma.log.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const logWithIdOnly = await prisma.log.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LogFindManyArgs>(args?: SelectSubset<T, LogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Log.
     * @param {LogCreateArgs} args - Arguments to create a Log.
     * @example
     * // Create one Log
     * const Log = await prisma.log.create({
     *   data: {
     *     // ... data to create a Log
     *   }
     * })
     * 
     */
    create<T extends LogCreateArgs>(args: SelectSubset<T, LogCreateArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Logs.
     * @param {LogCreateManyArgs} args - Arguments to create many Logs.
     * @example
     * // Create many Logs
     * const log = await prisma.log.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LogCreateManyArgs>(args?: SelectSubset<T, LogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Logs and returns the data saved in the database.
     * @param {LogCreateManyAndReturnArgs} args - Arguments to create many Logs.
     * @example
     * // Create many Logs
     * const log = await prisma.log.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Logs and only return the `id`
     * const logWithIdOnly = await prisma.log.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LogCreateManyAndReturnArgs>(args?: SelectSubset<T, LogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Log.
     * @param {LogDeleteArgs} args - Arguments to delete one Log.
     * @example
     * // Delete one Log
     * const Log = await prisma.log.delete({
     *   where: {
     *     // ... filter to delete one Log
     *   }
     * })
     * 
     */
    delete<T extends LogDeleteArgs>(args: SelectSubset<T, LogDeleteArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Log.
     * @param {LogUpdateArgs} args - Arguments to update one Log.
     * @example
     * // Update one Log
     * const log = await prisma.log.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LogUpdateArgs>(args: SelectSubset<T, LogUpdateArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Logs.
     * @param {LogDeleteManyArgs} args - Arguments to filter Logs to delete.
     * @example
     * // Delete a few Logs
     * const { count } = await prisma.log.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LogDeleteManyArgs>(args?: SelectSubset<T, LogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Logs
     * const log = await prisma.log.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LogUpdateManyArgs>(args: SelectSubset<T, LogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Logs and returns the data updated in the database.
     * @param {LogUpdateManyAndReturnArgs} args - Arguments to update many Logs.
     * @example
     * // Update many Logs
     * const log = await prisma.log.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Logs and only return the `id`
     * const logWithIdOnly = await prisma.log.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LogUpdateManyAndReturnArgs>(args: SelectSubset<T, LogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Log.
     * @param {LogUpsertArgs} args - Arguments to update or create a Log.
     * @example
     * // Update or create a Log
     * const log = await prisma.log.upsert({
     *   create: {
     *     // ... data to create a Log
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Log we want to update
     *   }
     * })
     */
    upsert<T extends LogUpsertArgs>(args: SelectSubset<T, LogUpsertArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogCountArgs} args - Arguments to filter Logs to count.
     * @example
     * // Count the number of Logs
     * const count = await prisma.log.count({
     *   where: {
     *     // ... the filter for the Logs we want to count
     *   }
     * })
    **/
    count<T extends LogCountArgs>(
      args?: Subset<T, LogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Log.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LogAggregateArgs>(args: Subset<T, LogAggregateArgs>): Prisma.PrismaPromise<GetLogAggregateType<T>>

    /**
     * Group by Log.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LogGroupByArgs['orderBy'] }
        : { orderBy?: LogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Log model
   */
  readonly fields: LogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Log.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    worker<T extends Log$workerArgs<ExtArgs> = {}>(args?: Subset<T, Log$workerArgs<ExtArgs>>): Prisma__WorkerClient<$Result.GetResult<Prisma.$WorkerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    subDomain<T extends Log$subDomainArgs<ExtArgs> = {}>(args?: Subset<T, Log$subDomainArgs<ExtArgs>>): Prisma__SubDomainClient<$Result.GetResult<Prisma.$SubDomainPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    passCode<T extends Log$passCodeArgs<ExtArgs> = {}>(args?: Subset<T, Log$passCodeArgs<ExtArgs>>): Prisma__PassCodeClient<$Result.GetResult<Prisma.$PassCodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Log model
   */
  interface LogFieldRefs {
    readonly id: FieldRef<"Log", 'Int'>
    readonly createdAt: FieldRef<"Log", 'DateTime'>
    readonly updatedAt: FieldRef<"Log", 'DateTime'>
    readonly comment: FieldRef<"Log", 'String'>
    readonly ip: FieldRef<"Log", 'String'>
    readonly userAgent: FieldRef<"Log", 'String'>
    readonly workerId: FieldRef<"Log", 'Int'>
    readonly subDomainId: FieldRef<"Log", 'Int'>
    readonly passCodeId: FieldRef<"Log", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Log findUnique
   */
  export type LogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where: LogWhereUniqueInput
  }

  /**
   * Log findUniqueOrThrow
   */
  export type LogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where: LogWhereUniqueInput
  }

  /**
   * Log findFirst
   */
  export type LogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Logs.
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Logs.
     */
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * Log findFirstOrThrow
   */
  export type LogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Logs.
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Logs.
     */
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * Log findMany
   */
  export type LogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter, which Logs to fetch.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Logs.
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * Log create
   */
  export type LogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * The data needed to create a Log.
     */
    data: XOR<LogCreateInput, LogUncheckedCreateInput>
  }

  /**
   * Log createMany
   */
  export type LogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Logs.
     */
    data: LogCreateManyInput | LogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Log createManyAndReturn
   */
  export type LogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * The data used to create many Logs.
     */
    data: LogCreateManyInput | LogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Log update
   */
  export type LogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * The data needed to update a Log.
     */
    data: XOR<LogUpdateInput, LogUncheckedUpdateInput>
    /**
     * Choose, which Log to update.
     */
    where: LogWhereUniqueInput
  }

  /**
   * Log updateMany
   */
  export type LogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Logs.
     */
    data: XOR<LogUpdateManyMutationInput, LogUncheckedUpdateManyInput>
    /**
     * Filter which Logs to update
     */
    where?: LogWhereInput
    /**
     * Limit how many Logs to update.
     */
    limit?: number
  }

  /**
   * Log updateManyAndReturn
   */
  export type LogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * The data used to update Logs.
     */
    data: XOR<LogUpdateManyMutationInput, LogUncheckedUpdateManyInput>
    /**
     * Filter which Logs to update
     */
    where?: LogWhereInput
    /**
     * Limit how many Logs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Log upsert
   */
  export type LogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * The filter to search for the Log to update in case it exists.
     */
    where: LogWhereUniqueInput
    /**
     * In case the Log found by the `where` argument doesn't exist, create a new Log with this data.
     */
    create: XOR<LogCreateInput, LogUncheckedCreateInput>
    /**
     * In case the Log was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LogUpdateInput, LogUncheckedUpdateInput>
  }

  /**
   * Log delete
   */
  export type LogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter which Log to delete.
     */
    where: LogWhereUniqueInput
  }

  /**
   * Log deleteMany
   */
  export type LogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Logs to delete
     */
    where?: LogWhereInput
    /**
     * Limit how many Logs to delete.
     */
    limit?: number
  }

  /**
   * Log.worker
   */
  export type Log$workerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Worker
     */
    select?: WorkerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Worker
     */
    omit?: WorkerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkerInclude<ExtArgs> | null
    where?: WorkerWhereInput
  }

  /**
   * Log.subDomain
   */
  export type Log$subDomainArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubDomain
     */
    select?: SubDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubDomain
     */
    omit?: SubDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubDomainInclude<ExtArgs> | null
    where?: SubDomainWhereInput
  }

  /**
   * Log.passCode
   */
  export type Log$passCodeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassCode
     */
    select?: PassCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PassCode
     */
    omit?: PassCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassCodeInclude<ExtArgs> | null
    where?: PassCodeWhereInput
  }

  /**
   * Log without action
   */
  export type LogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const WorkerScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    name: 'name',
    secretKey: 'secretKey',
    telegramId: 'telegramId',
    blocked: 'blocked',
    username: 'username'
  };

  export type WorkerScalarFieldEnum = (typeof WorkerScalarFieldEnum)[keyof typeof WorkerScalarFieldEnum]


  export const PassCodeScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    workerId: 'workerId',
    active: 'active'
  };

  export type PassCodeScalarFieldEnum = (typeof PassCodeScalarFieldEnum)[keyof typeof PassCodeScalarFieldEnum]


  export const DomainScalarFieldEnum: {
    id: 'id',
    domain: 'domain',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    status: 'status',
    cfId: 'cfId'
  };

  export type DomainScalarFieldEnum = (typeof DomainScalarFieldEnum)[keyof typeof DomainScalarFieldEnum]


  export const SubDomainScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    workerId: 'workerId',
    domainId: 'domainId',
    siteId: 'siteId',
    prefix: 'prefix'
  };

  export type SubDomainScalarFieldEnum = (typeof SubDomainScalarFieldEnum)[keyof typeof SubDomainScalarFieldEnum]


  export const SiteScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    ip: 'ip',
    name: 'name',
    status: 'status'
  };

  export type SiteScalarFieldEnum = (typeof SiteScalarFieldEnum)[keyof typeof SiteScalarFieldEnum]


  export const LogScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    comment: 'comment',
    ip: 'ip',
    userAgent: 'userAgent',
    workerId: 'workerId',
    subDomainId: 'subDomainId',
    passCodeId: 'passCodeId'
  };

  export type LogScalarFieldEnum = (typeof LogScalarFieldEnum)[keyof typeof LogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type WorkerWhereInput = {
    AND?: WorkerWhereInput | WorkerWhereInput[]
    OR?: WorkerWhereInput[]
    NOT?: WorkerWhereInput | WorkerWhereInput[]
    id?: IntFilter<"Worker"> | number
    createdAt?: DateTimeFilter<"Worker"> | Date | string
    updatedAt?: DateTimeFilter<"Worker"> | Date | string
    name?: StringFilter<"Worker"> | string
    secretKey?: StringNullableFilter<"Worker"> | string | null
    telegramId?: StringFilter<"Worker"> | string
    blocked?: BoolNullableFilter<"Worker"> | boolean | null
    username?: StringNullableFilter<"Worker"> | string | null
    subdomains?: SubDomainListRelationFilter
    logs?: LogListRelationFilter
    passCode?: PassCodeListRelationFilter
  }

  export type WorkerOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    secretKey?: SortOrderInput | SortOrder
    telegramId?: SortOrder
    blocked?: SortOrderInput | SortOrder
    username?: SortOrderInput | SortOrder
    subdomains?: SubDomainOrderByRelationAggregateInput
    logs?: LogOrderByRelationAggregateInput
    passCode?: PassCodeOrderByRelationAggregateInput
  }

  export type WorkerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    secretKey?: string
    telegramId?: string
    AND?: WorkerWhereInput | WorkerWhereInput[]
    OR?: WorkerWhereInput[]
    NOT?: WorkerWhereInput | WorkerWhereInput[]
    createdAt?: DateTimeFilter<"Worker"> | Date | string
    updatedAt?: DateTimeFilter<"Worker"> | Date | string
    name?: StringFilter<"Worker"> | string
    blocked?: BoolNullableFilter<"Worker"> | boolean | null
    username?: StringNullableFilter<"Worker"> | string | null
    subdomains?: SubDomainListRelationFilter
    logs?: LogListRelationFilter
    passCode?: PassCodeListRelationFilter
  }, "id" | "secretKey" | "telegramId">

  export type WorkerOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    secretKey?: SortOrderInput | SortOrder
    telegramId?: SortOrder
    blocked?: SortOrderInput | SortOrder
    username?: SortOrderInput | SortOrder
    _count?: WorkerCountOrderByAggregateInput
    _avg?: WorkerAvgOrderByAggregateInput
    _max?: WorkerMaxOrderByAggregateInput
    _min?: WorkerMinOrderByAggregateInput
    _sum?: WorkerSumOrderByAggregateInput
  }

  export type WorkerScalarWhereWithAggregatesInput = {
    AND?: WorkerScalarWhereWithAggregatesInput | WorkerScalarWhereWithAggregatesInput[]
    OR?: WorkerScalarWhereWithAggregatesInput[]
    NOT?: WorkerScalarWhereWithAggregatesInput | WorkerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Worker"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Worker"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Worker"> | Date | string
    name?: StringWithAggregatesFilter<"Worker"> | string
    secretKey?: StringNullableWithAggregatesFilter<"Worker"> | string | null
    telegramId?: StringWithAggregatesFilter<"Worker"> | string
    blocked?: BoolNullableWithAggregatesFilter<"Worker"> | boolean | null
    username?: StringNullableWithAggregatesFilter<"Worker"> | string | null
  }

  export type PassCodeWhereInput = {
    AND?: PassCodeWhereInput | PassCodeWhereInput[]
    OR?: PassCodeWhereInput[]
    NOT?: PassCodeWhereInput | PassCodeWhereInput[]
    id?: StringFilter<"PassCode"> | string
    createdAt?: DateTimeFilter<"PassCode"> | Date | string
    updatedAt?: DateTimeFilter<"PassCode"> | Date | string
    workerId?: IntNullableFilter<"PassCode"> | number | null
    active?: BoolFilter<"PassCode"> | boolean
    worker?: XOR<WorkerNullableScalarRelationFilter, WorkerWhereInput> | null
    log?: XOR<LogNullableScalarRelationFilter, LogWhereInput> | null
  }

  export type PassCodeOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workerId?: SortOrderInput | SortOrder
    active?: SortOrder
    worker?: WorkerOrderByWithRelationInput
    log?: LogOrderByWithRelationInput
  }

  export type PassCodeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PassCodeWhereInput | PassCodeWhereInput[]
    OR?: PassCodeWhereInput[]
    NOT?: PassCodeWhereInput | PassCodeWhereInput[]
    createdAt?: DateTimeFilter<"PassCode"> | Date | string
    updatedAt?: DateTimeFilter<"PassCode"> | Date | string
    workerId?: IntNullableFilter<"PassCode"> | number | null
    active?: BoolFilter<"PassCode"> | boolean
    worker?: XOR<WorkerNullableScalarRelationFilter, WorkerWhereInput> | null
    log?: XOR<LogNullableScalarRelationFilter, LogWhereInput> | null
  }, "id">

  export type PassCodeOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workerId?: SortOrderInput | SortOrder
    active?: SortOrder
    _count?: PassCodeCountOrderByAggregateInput
    _avg?: PassCodeAvgOrderByAggregateInput
    _max?: PassCodeMaxOrderByAggregateInput
    _min?: PassCodeMinOrderByAggregateInput
    _sum?: PassCodeSumOrderByAggregateInput
  }

  export type PassCodeScalarWhereWithAggregatesInput = {
    AND?: PassCodeScalarWhereWithAggregatesInput | PassCodeScalarWhereWithAggregatesInput[]
    OR?: PassCodeScalarWhereWithAggregatesInput[]
    NOT?: PassCodeScalarWhereWithAggregatesInput | PassCodeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PassCode"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PassCode"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PassCode"> | Date | string
    workerId?: IntNullableWithAggregatesFilter<"PassCode"> | number | null
    active?: BoolWithAggregatesFilter<"PassCode"> | boolean
  }

  export type DomainWhereInput = {
    AND?: DomainWhereInput | DomainWhereInput[]
    OR?: DomainWhereInput[]
    NOT?: DomainWhereInput | DomainWhereInput[]
    id?: IntFilter<"Domain"> | number
    domain?: StringFilter<"Domain"> | string
    createdAt?: DateTimeFilter<"Domain"> | Date | string
    updatedAt?: DateTimeFilter<"Domain"> | Date | string
    status?: BoolFilter<"Domain"> | boolean
    cfId?: StringFilter<"Domain"> | string
    subdomains?: SubDomainListRelationFilter
  }

  export type DomainOrderByWithRelationInput = {
    id?: SortOrder
    domain?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    cfId?: SortOrder
    subdomains?: SubDomainOrderByRelationAggregateInput
  }

  export type DomainWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    domain?: string
    cfId?: string
    AND?: DomainWhereInput | DomainWhereInput[]
    OR?: DomainWhereInput[]
    NOT?: DomainWhereInput | DomainWhereInput[]
    createdAt?: DateTimeFilter<"Domain"> | Date | string
    updatedAt?: DateTimeFilter<"Domain"> | Date | string
    status?: BoolFilter<"Domain"> | boolean
    subdomains?: SubDomainListRelationFilter
  }, "id" | "domain" | "cfId">

  export type DomainOrderByWithAggregationInput = {
    id?: SortOrder
    domain?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    cfId?: SortOrder
    _count?: DomainCountOrderByAggregateInput
    _avg?: DomainAvgOrderByAggregateInput
    _max?: DomainMaxOrderByAggregateInput
    _min?: DomainMinOrderByAggregateInput
    _sum?: DomainSumOrderByAggregateInput
  }

  export type DomainScalarWhereWithAggregatesInput = {
    AND?: DomainScalarWhereWithAggregatesInput | DomainScalarWhereWithAggregatesInput[]
    OR?: DomainScalarWhereWithAggregatesInput[]
    NOT?: DomainScalarWhereWithAggregatesInput | DomainScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Domain"> | number
    domain?: StringWithAggregatesFilter<"Domain"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Domain"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Domain"> | Date | string
    status?: BoolWithAggregatesFilter<"Domain"> | boolean
    cfId?: StringWithAggregatesFilter<"Domain"> | string
  }

  export type SubDomainWhereInput = {
    AND?: SubDomainWhereInput | SubDomainWhereInput[]
    OR?: SubDomainWhereInput[]
    NOT?: SubDomainWhereInput | SubDomainWhereInput[]
    id?: IntFilter<"SubDomain"> | number
    createdAt?: DateTimeFilter<"SubDomain"> | Date | string
    updatedAt?: DateTimeFilter<"SubDomain"> | Date | string
    workerId?: IntNullableFilter<"SubDomain"> | number | null
    domainId?: IntNullableFilter<"SubDomain"> | number | null
    siteId?: IntNullableFilter<"SubDomain"> | number | null
    prefix?: StringFilter<"SubDomain"> | string
    worker?: XOR<WorkerNullableScalarRelationFilter, WorkerWhereInput> | null
    domain?: XOR<DomainNullableScalarRelationFilter, DomainWhereInput> | null
    logs?: LogListRelationFilter
    site?: XOR<SiteNullableScalarRelationFilter, SiteWhereInput> | null
  }

  export type SubDomainOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workerId?: SortOrderInput | SortOrder
    domainId?: SortOrderInput | SortOrder
    siteId?: SortOrderInput | SortOrder
    prefix?: SortOrder
    worker?: WorkerOrderByWithRelationInput
    domain?: DomainOrderByWithRelationInput
    logs?: LogOrderByRelationAggregateInput
    site?: SiteOrderByWithRelationInput
  }

  export type SubDomainWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    prefix_domainId?: SubDomainPrefixDomainIdCompoundUniqueInput
    AND?: SubDomainWhereInput | SubDomainWhereInput[]
    OR?: SubDomainWhereInput[]
    NOT?: SubDomainWhereInput | SubDomainWhereInput[]
    createdAt?: DateTimeFilter<"SubDomain"> | Date | string
    updatedAt?: DateTimeFilter<"SubDomain"> | Date | string
    workerId?: IntNullableFilter<"SubDomain"> | number | null
    domainId?: IntNullableFilter<"SubDomain"> | number | null
    siteId?: IntNullableFilter<"SubDomain"> | number | null
    prefix?: StringFilter<"SubDomain"> | string
    worker?: XOR<WorkerNullableScalarRelationFilter, WorkerWhereInput> | null
    domain?: XOR<DomainNullableScalarRelationFilter, DomainWhereInput> | null
    logs?: LogListRelationFilter
    site?: XOR<SiteNullableScalarRelationFilter, SiteWhereInput> | null
  }, "id" | "prefix_domainId">

  export type SubDomainOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workerId?: SortOrderInput | SortOrder
    domainId?: SortOrderInput | SortOrder
    siteId?: SortOrderInput | SortOrder
    prefix?: SortOrder
    _count?: SubDomainCountOrderByAggregateInput
    _avg?: SubDomainAvgOrderByAggregateInput
    _max?: SubDomainMaxOrderByAggregateInput
    _min?: SubDomainMinOrderByAggregateInput
    _sum?: SubDomainSumOrderByAggregateInput
  }

  export type SubDomainScalarWhereWithAggregatesInput = {
    AND?: SubDomainScalarWhereWithAggregatesInput | SubDomainScalarWhereWithAggregatesInput[]
    OR?: SubDomainScalarWhereWithAggregatesInput[]
    NOT?: SubDomainScalarWhereWithAggregatesInput | SubDomainScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SubDomain"> | number
    createdAt?: DateTimeWithAggregatesFilter<"SubDomain"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SubDomain"> | Date | string
    workerId?: IntNullableWithAggregatesFilter<"SubDomain"> | number | null
    domainId?: IntNullableWithAggregatesFilter<"SubDomain"> | number | null
    siteId?: IntNullableWithAggregatesFilter<"SubDomain"> | number | null
    prefix?: StringWithAggregatesFilter<"SubDomain"> | string
  }

  export type SiteWhereInput = {
    AND?: SiteWhereInput | SiteWhereInput[]
    OR?: SiteWhereInput[]
    NOT?: SiteWhereInput | SiteWhereInput[]
    id?: IntFilter<"Site"> | number
    createdAt?: DateTimeFilter<"Site"> | Date | string
    updatedAt?: DateTimeFilter<"Site"> | Date | string
    ip?: StringFilter<"Site"> | string
    name?: StringNullableFilter<"Site"> | string | null
    status?: BoolFilter<"Site"> | boolean
    subDomain?: SubDomainListRelationFilter
  }

  export type SiteOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ip?: SortOrder
    name?: SortOrderInput | SortOrder
    status?: SortOrder
    subDomain?: SubDomainOrderByRelationAggregateInput
  }

  export type SiteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SiteWhereInput | SiteWhereInput[]
    OR?: SiteWhereInput[]
    NOT?: SiteWhereInput | SiteWhereInput[]
    createdAt?: DateTimeFilter<"Site"> | Date | string
    updatedAt?: DateTimeFilter<"Site"> | Date | string
    ip?: StringFilter<"Site"> | string
    name?: StringNullableFilter<"Site"> | string | null
    status?: BoolFilter<"Site"> | boolean
    subDomain?: SubDomainListRelationFilter
  }, "id">

  export type SiteOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ip?: SortOrder
    name?: SortOrderInput | SortOrder
    status?: SortOrder
    _count?: SiteCountOrderByAggregateInput
    _avg?: SiteAvgOrderByAggregateInput
    _max?: SiteMaxOrderByAggregateInput
    _min?: SiteMinOrderByAggregateInput
    _sum?: SiteSumOrderByAggregateInput
  }

  export type SiteScalarWhereWithAggregatesInput = {
    AND?: SiteScalarWhereWithAggregatesInput | SiteScalarWhereWithAggregatesInput[]
    OR?: SiteScalarWhereWithAggregatesInput[]
    NOT?: SiteScalarWhereWithAggregatesInput | SiteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Site"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Site"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Site"> | Date | string
    ip?: StringWithAggregatesFilter<"Site"> | string
    name?: StringNullableWithAggregatesFilter<"Site"> | string | null
    status?: BoolWithAggregatesFilter<"Site"> | boolean
  }

  export type LogWhereInput = {
    AND?: LogWhereInput | LogWhereInput[]
    OR?: LogWhereInput[]
    NOT?: LogWhereInput | LogWhereInput[]
    id?: IntFilter<"Log"> | number
    createdAt?: DateTimeFilter<"Log"> | Date | string
    updatedAt?: DateTimeFilter<"Log"> | Date | string
    comment?: StringNullableFilter<"Log"> | string | null
    ip?: StringNullableFilter<"Log"> | string | null
    userAgent?: StringNullableFilter<"Log"> | string | null
    workerId?: IntNullableFilter<"Log"> | number | null
    subDomainId?: IntNullableFilter<"Log"> | number | null
    passCodeId?: StringNullableFilter<"Log"> | string | null
    worker?: XOR<WorkerNullableScalarRelationFilter, WorkerWhereInput> | null
    subDomain?: XOR<SubDomainNullableScalarRelationFilter, SubDomainWhereInput> | null
    passCode?: XOR<PassCodeNullableScalarRelationFilter, PassCodeWhereInput> | null
  }

  export type LogOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    comment?: SortOrderInput | SortOrder
    ip?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    workerId?: SortOrderInput | SortOrder
    subDomainId?: SortOrderInput | SortOrder
    passCodeId?: SortOrderInput | SortOrder
    worker?: WorkerOrderByWithRelationInput
    subDomain?: SubDomainOrderByWithRelationInput
    passCode?: PassCodeOrderByWithRelationInput
  }

  export type LogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    passCodeId?: string
    AND?: LogWhereInput | LogWhereInput[]
    OR?: LogWhereInput[]
    NOT?: LogWhereInput | LogWhereInput[]
    createdAt?: DateTimeFilter<"Log"> | Date | string
    updatedAt?: DateTimeFilter<"Log"> | Date | string
    comment?: StringNullableFilter<"Log"> | string | null
    ip?: StringNullableFilter<"Log"> | string | null
    userAgent?: StringNullableFilter<"Log"> | string | null
    workerId?: IntNullableFilter<"Log"> | number | null
    subDomainId?: IntNullableFilter<"Log"> | number | null
    worker?: XOR<WorkerNullableScalarRelationFilter, WorkerWhereInput> | null
    subDomain?: XOR<SubDomainNullableScalarRelationFilter, SubDomainWhereInput> | null
    passCode?: XOR<PassCodeNullableScalarRelationFilter, PassCodeWhereInput> | null
  }, "id" | "passCodeId">

  export type LogOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    comment?: SortOrderInput | SortOrder
    ip?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    workerId?: SortOrderInput | SortOrder
    subDomainId?: SortOrderInput | SortOrder
    passCodeId?: SortOrderInput | SortOrder
    _count?: LogCountOrderByAggregateInput
    _avg?: LogAvgOrderByAggregateInput
    _max?: LogMaxOrderByAggregateInput
    _min?: LogMinOrderByAggregateInput
    _sum?: LogSumOrderByAggregateInput
  }

  export type LogScalarWhereWithAggregatesInput = {
    AND?: LogScalarWhereWithAggregatesInput | LogScalarWhereWithAggregatesInput[]
    OR?: LogScalarWhereWithAggregatesInput[]
    NOT?: LogScalarWhereWithAggregatesInput | LogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Log"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Log"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Log"> | Date | string
    comment?: StringNullableWithAggregatesFilter<"Log"> | string | null
    ip?: StringNullableWithAggregatesFilter<"Log"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"Log"> | string | null
    workerId?: IntNullableWithAggregatesFilter<"Log"> | number | null
    subDomainId?: IntNullableWithAggregatesFilter<"Log"> | number | null
    passCodeId?: StringNullableWithAggregatesFilter<"Log"> | string | null
  }

  export type WorkerCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    secretKey?: string | null
    telegramId: string
    blocked?: boolean | null
    username?: string | null
    subdomains?: SubDomainCreateNestedManyWithoutWorkerInput
    logs?: LogCreateNestedManyWithoutWorkerInput
    passCode?: PassCodeCreateNestedManyWithoutWorkerInput
  }

  export type WorkerUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    secretKey?: string | null
    telegramId: string
    blocked?: boolean | null
    username?: string | null
    subdomains?: SubDomainUncheckedCreateNestedManyWithoutWorkerInput
    logs?: LogUncheckedCreateNestedManyWithoutWorkerInput
    passCode?: PassCodeUncheckedCreateNestedManyWithoutWorkerInput
  }

  export type WorkerUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    telegramId?: StringFieldUpdateOperationsInput | string
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    subdomains?: SubDomainUpdateManyWithoutWorkerNestedInput
    logs?: LogUpdateManyWithoutWorkerNestedInput
    passCode?: PassCodeUpdateManyWithoutWorkerNestedInput
  }

  export type WorkerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    telegramId?: StringFieldUpdateOperationsInput | string
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    subdomains?: SubDomainUncheckedUpdateManyWithoutWorkerNestedInput
    logs?: LogUncheckedUpdateManyWithoutWorkerNestedInput
    passCode?: PassCodeUncheckedUpdateManyWithoutWorkerNestedInput
  }

  export type WorkerCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    secretKey?: string | null
    telegramId: string
    blocked?: boolean | null
    username?: string | null
  }

  export type WorkerUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    telegramId?: StringFieldUpdateOperationsInput | string
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    telegramId?: StringFieldUpdateOperationsInput | string
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PassCodeCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    active?: boolean
    worker?: WorkerCreateNestedOneWithoutPassCodeInput
    log?: LogCreateNestedOneWithoutPassCodeInput
  }

  export type PassCodeUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    workerId?: number | null
    active?: boolean
    log?: LogUncheckedCreateNestedOneWithoutPassCodeInput
  }

  export type PassCodeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
    worker?: WorkerUpdateOneWithoutPassCodeNestedInput
    log?: LogUpdateOneWithoutPassCodeNestedInput
  }

  export type PassCodeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workerId?: NullableIntFieldUpdateOperationsInput | number | null
    active?: BoolFieldUpdateOperationsInput | boolean
    log?: LogUncheckedUpdateOneWithoutPassCodeNestedInput
  }

  export type PassCodeCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    workerId?: number | null
    active?: boolean
  }

  export type PassCodeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PassCodeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workerId?: NullableIntFieldUpdateOperationsInput | number | null
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DomainCreateInput = {
    domain: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status: boolean
    cfId: string
    subdomains?: SubDomainCreateNestedManyWithoutDomainInput
  }

  export type DomainUncheckedCreateInput = {
    id?: number
    domain: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status: boolean
    cfId: string
    subdomains?: SubDomainUncheckedCreateNestedManyWithoutDomainInput
  }

  export type DomainUpdateInput = {
    domain?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
    cfId?: StringFieldUpdateOperationsInput | string
    subdomains?: SubDomainUpdateManyWithoutDomainNestedInput
  }

  export type DomainUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    domain?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
    cfId?: StringFieldUpdateOperationsInput | string
    subdomains?: SubDomainUncheckedUpdateManyWithoutDomainNestedInput
  }

  export type DomainCreateManyInput = {
    id?: number
    domain: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status: boolean
    cfId: string
  }

  export type DomainUpdateManyMutationInput = {
    domain?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
    cfId?: StringFieldUpdateOperationsInput | string
  }

  export type DomainUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    domain?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
    cfId?: StringFieldUpdateOperationsInput | string
  }

  export type SubDomainCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    prefix: string
    worker?: WorkerCreateNestedOneWithoutSubdomainsInput
    domain?: DomainCreateNestedOneWithoutSubdomainsInput
    logs?: LogCreateNestedManyWithoutSubDomainInput
    site?: SiteCreateNestedOneWithoutSubDomainInput
  }

  export type SubDomainUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    workerId?: number | null
    domainId?: number | null
    siteId?: number | null
    prefix: string
    logs?: LogUncheckedCreateNestedManyWithoutSubDomainInput
  }

  export type SubDomainUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    prefix?: StringFieldUpdateOperationsInput | string
    worker?: WorkerUpdateOneWithoutSubdomainsNestedInput
    domain?: DomainUpdateOneWithoutSubdomainsNestedInput
    logs?: LogUpdateManyWithoutSubDomainNestedInput
    site?: SiteUpdateOneWithoutSubDomainNestedInput
  }

  export type SubDomainUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workerId?: NullableIntFieldUpdateOperationsInput | number | null
    domainId?: NullableIntFieldUpdateOperationsInput | number | null
    siteId?: NullableIntFieldUpdateOperationsInput | number | null
    prefix?: StringFieldUpdateOperationsInput | string
    logs?: LogUncheckedUpdateManyWithoutSubDomainNestedInput
  }

  export type SubDomainCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    workerId?: number | null
    domainId?: number | null
    siteId?: number | null
    prefix: string
  }

  export type SubDomainUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    prefix?: StringFieldUpdateOperationsInput | string
  }

  export type SubDomainUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workerId?: NullableIntFieldUpdateOperationsInput | number | null
    domainId?: NullableIntFieldUpdateOperationsInput | number | null
    siteId?: NullableIntFieldUpdateOperationsInput | number | null
    prefix?: StringFieldUpdateOperationsInput | string
  }

  export type SiteCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    ip: string
    name?: string | null
    status: boolean
    subDomain?: SubDomainCreateNestedManyWithoutSiteInput
  }

  export type SiteUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    ip: string
    name?: string | null
    status: boolean
    subDomain?: SubDomainUncheckedCreateNestedManyWithoutSiteInput
  }

  export type SiteUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ip?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    subDomain?: SubDomainUpdateManyWithoutSiteNestedInput
  }

  export type SiteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ip?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    subDomain?: SubDomainUncheckedUpdateManyWithoutSiteNestedInput
  }

  export type SiteCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    ip: string
    name?: string | null
    status: boolean
  }

  export type SiteUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ip?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SiteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ip?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type LogCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    comment?: string | null
    ip?: string | null
    userAgent?: string | null
    worker?: WorkerCreateNestedOneWithoutLogsInput
    subDomain?: SubDomainCreateNestedOneWithoutLogsInput
    passCode?: PassCodeCreateNestedOneWithoutLogInput
  }

  export type LogUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    comment?: string | null
    ip?: string | null
    userAgent?: string | null
    workerId?: number | null
    subDomainId?: number | null
    passCodeId?: string | null
  }

  export type LogUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    worker?: WorkerUpdateOneWithoutLogsNestedInput
    subDomain?: SubDomainUpdateOneWithoutLogsNestedInput
    passCode?: PassCodeUpdateOneWithoutLogNestedInput
  }

  export type LogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    workerId?: NullableIntFieldUpdateOperationsInput | number | null
    subDomainId?: NullableIntFieldUpdateOperationsInput | number | null
    passCodeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LogCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    comment?: string | null
    ip?: string | null
    userAgent?: string | null
    workerId?: number | null
    subDomainId?: number | null
    passCodeId?: string | null
  }

  export type LogUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    workerId?: NullableIntFieldUpdateOperationsInput | number | null
    subDomainId?: NullableIntFieldUpdateOperationsInput | number | null
    passCodeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type SubDomainListRelationFilter = {
    every?: SubDomainWhereInput
    some?: SubDomainWhereInput
    none?: SubDomainWhereInput
  }

  export type LogListRelationFilter = {
    every?: LogWhereInput
    some?: LogWhereInput
    none?: LogWhereInput
  }

  export type PassCodeListRelationFilter = {
    every?: PassCodeWhereInput
    some?: PassCodeWhereInput
    none?: PassCodeWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SubDomainOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PassCodeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkerCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    secretKey?: SortOrder
    telegramId?: SortOrder
    blocked?: SortOrder
    username?: SortOrder
  }

  export type WorkerAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type WorkerMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    secretKey?: SortOrder
    telegramId?: SortOrder
    blocked?: SortOrder
    username?: SortOrder
  }

  export type WorkerMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    secretKey?: SortOrder
    telegramId?: SortOrder
    blocked?: SortOrder
    username?: SortOrder
  }

  export type WorkerSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type WorkerNullableScalarRelationFilter = {
    is?: WorkerWhereInput | null
    isNot?: WorkerWhereInput | null
  }

  export type LogNullableScalarRelationFilter = {
    is?: LogWhereInput | null
    isNot?: LogWhereInput | null
  }

  export type PassCodeCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workerId?: SortOrder
    active?: SortOrder
  }

  export type PassCodeAvgOrderByAggregateInput = {
    workerId?: SortOrder
  }

  export type PassCodeMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workerId?: SortOrder
    active?: SortOrder
  }

  export type PassCodeMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workerId?: SortOrder
    active?: SortOrder
  }

  export type PassCodeSumOrderByAggregateInput = {
    workerId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DomainCountOrderByAggregateInput = {
    id?: SortOrder
    domain?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    cfId?: SortOrder
  }

  export type DomainAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DomainMaxOrderByAggregateInput = {
    id?: SortOrder
    domain?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    cfId?: SortOrder
  }

  export type DomainMinOrderByAggregateInput = {
    id?: SortOrder
    domain?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    cfId?: SortOrder
  }

  export type DomainSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DomainNullableScalarRelationFilter = {
    is?: DomainWhereInput | null
    isNot?: DomainWhereInput | null
  }

  export type SiteNullableScalarRelationFilter = {
    is?: SiteWhereInput | null
    isNot?: SiteWhereInput | null
  }

  export type SubDomainPrefixDomainIdCompoundUniqueInput = {
    prefix: string
    domainId: number
  }

  export type SubDomainCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workerId?: SortOrder
    domainId?: SortOrder
    siteId?: SortOrder
    prefix?: SortOrder
  }

  export type SubDomainAvgOrderByAggregateInput = {
    id?: SortOrder
    workerId?: SortOrder
    domainId?: SortOrder
    siteId?: SortOrder
  }

  export type SubDomainMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workerId?: SortOrder
    domainId?: SortOrder
    siteId?: SortOrder
    prefix?: SortOrder
  }

  export type SubDomainMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workerId?: SortOrder
    domainId?: SortOrder
    siteId?: SortOrder
    prefix?: SortOrder
  }

  export type SubDomainSumOrderByAggregateInput = {
    id?: SortOrder
    workerId?: SortOrder
    domainId?: SortOrder
    siteId?: SortOrder
  }

  export type SiteCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ip?: SortOrder
    name?: SortOrder
    status?: SortOrder
  }

  export type SiteAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SiteMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ip?: SortOrder
    name?: SortOrder
    status?: SortOrder
  }

  export type SiteMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ip?: SortOrder
    name?: SortOrder
    status?: SortOrder
  }

  export type SiteSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SubDomainNullableScalarRelationFilter = {
    is?: SubDomainWhereInput | null
    isNot?: SubDomainWhereInput | null
  }

  export type PassCodeNullableScalarRelationFilter = {
    is?: PassCodeWhereInput | null
    isNot?: PassCodeWhereInput | null
  }

  export type LogCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    comment?: SortOrder
    ip?: SortOrder
    userAgent?: SortOrder
    workerId?: SortOrder
    subDomainId?: SortOrder
    passCodeId?: SortOrder
  }

  export type LogAvgOrderByAggregateInput = {
    id?: SortOrder
    workerId?: SortOrder
    subDomainId?: SortOrder
  }

  export type LogMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    comment?: SortOrder
    ip?: SortOrder
    userAgent?: SortOrder
    workerId?: SortOrder
    subDomainId?: SortOrder
    passCodeId?: SortOrder
  }

  export type LogMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    comment?: SortOrder
    ip?: SortOrder
    userAgent?: SortOrder
    workerId?: SortOrder
    subDomainId?: SortOrder
    passCodeId?: SortOrder
  }

  export type LogSumOrderByAggregateInput = {
    id?: SortOrder
    workerId?: SortOrder
    subDomainId?: SortOrder
  }

  export type SubDomainCreateNestedManyWithoutWorkerInput = {
    create?: XOR<SubDomainCreateWithoutWorkerInput, SubDomainUncheckedCreateWithoutWorkerInput> | SubDomainCreateWithoutWorkerInput[] | SubDomainUncheckedCreateWithoutWorkerInput[]
    connectOrCreate?: SubDomainCreateOrConnectWithoutWorkerInput | SubDomainCreateOrConnectWithoutWorkerInput[]
    createMany?: SubDomainCreateManyWorkerInputEnvelope
    connect?: SubDomainWhereUniqueInput | SubDomainWhereUniqueInput[]
  }

  export type LogCreateNestedManyWithoutWorkerInput = {
    create?: XOR<LogCreateWithoutWorkerInput, LogUncheckedCreateWithoutWorkerInput> | LogCreateWithoutWorkerInput[] | LogUncheckedCreateWithoutWorkerInput[]
    connectOrCreate?: LogCreateOrConnectWithoutWorkerInput | LogCreateOrConnectWithoutWorkerInput[]
    createMany?: LogCreateManyWorkerInputEnvelope
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
  }

  export type PassCodeCreateNestedManyWithoutWorkerInput = {
    create?: XOR<PassCodeCreateWithoutWorkerInput, PassCodeUncheckedCreateWithoutWorkerInput> | PassCodeCreateWithoutWorkerInput[] | PassCodeUncheckedCreateWithoutWorkerInput[]
    connectOrCreate?: PassCodeCreateOrConnectWithoutWorkerInput | PassCodeCreateOrConnectWithoutWorkerInput[]
    createMany?: PassCodeCreateManyWorkerInputEnvelope
    connect?: PassCodeWhereUniqueInput | PassCodeWhereUniqueInput[]
  }

  export type SubDomainUncheckedCreateNestedManyWithoutWorkerInput = {
    create?: XOR<SubDomainCreateWithoutWorkerInput, SubDomainUncheckedCreateWithoutWorkerInput> | SubDomainCreateWithoutWorkerInput[] | SubDomainUncheckedCreateWithoutWorkerInput[]
    connectOrCreate?: SubDomainCreateOrConnectWithoutWorkerInput | SubDomainCreateOrConnectWithoutWorkerInput[]
    createMany?: SubDomainCreateManyWorkerInputEnvelope
    connect?: SubDomainWhereUniqueInput | SubDomainWhereUniqueInput[]
  }

  export type LogUncheckedCreateNestedManyWithoutWorkerInput = {
    create?: XOR<LogCreateWithoutWorkerInput, LogUncheckedCreateWithoutWorkerInput> | LogCreateWithoutWorkerInput[] | LogUncheckedCreateWithoutWorkerInput[]
    connectOrCreate?: LogCreateOrConnectWithoutWorkerInput | LogCreateOrConnectWithoutWorkerInput[]
    createMany?: LogCreateManyWorkerInputEnvelope
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
  }

  export type PassCodeUncheckedCreateNestedManyWithoutWorkerInput = {
    create?: XOR<PassCodeCreateWithoutWorkerInput, PassCodeUncheckedCreateWithoutWorkerInput> | PassCodeCreateWithoutWorkerInput[] | PassCodeUncheckedCreateWithoutWorkerInput[]
    connectOrCreate?: PassCodeCreateOrConnectWithoutWorkerInput | PassCodeCreateOrConnectWithoutWorkerInput[]
    createMany?: PassCodeCreateManyWorkerInputEnvelope
    connect?: PassCodeWhereUniqueInput | PassCodeWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type SubDomainUpdateManyWithoutWorkerNestedInput = {
    create?: XOR<SubDomainCreateWithoutWorkerInput, SubDomainUncheckedCreateWithoutWorkerInput> | SubDomainCreateWithoutWorkerInput[] | SubDomainUncheckedCreateWithoutWorkerInput[]
    connectOrCreate?: SubDomainCreateOrConnectWithoutWorkerInput | SubDomainCreateOrConnectWithoutWorkerInput[]
    upsert?: SubDomainUpsertWithWhereUniqueWithoutWorkerInput | SubDomainUpsertWithWhereUniqueWithoutWorkerInput[]
    createMany?: SubDomainCreateManyWorkerInputEnvelope
    set?: SubDomainWhereUniqueInput | SubDomainWhereUniqueInput[]
    disconnect?: SubDomainWhereUniqueInput | SubDomainWhereUniqueInput[]
    delete?: SubDomainWhereUniqueInput | SubDomainWhereUniqueInput[]
    connect?: SubDomainWhereUniqueInput | SubDomainWhereUniqueInput[]
    update?: SubDomainUpdateWithWhereUniqueWithoutWorkerInput | SubDomainUpdateWithWhereUniqueWithoutWorkerInput[]
    updateMany?: SubDomainUpdateManyWithWhereWithoutWorkerInput | SubDomainUpdateManyWithWhereWithoutWorkerInput[]
    deleteMany?: SubDomainScalarWhereInput | SubDomainScalarWhereInput[]
  }

  export type LogUpdateManyWithoutWorkerNestedInput = {
    create?: XOR<LogCreateWithoutWorkerInput, LogUncheckedCreateWithoutWorkerInput> | LogCreateWithoutWorkerInput[] | LogUncheckedCreateWithoutWorkerInput[]
    connectOrCreate?: LogCreateOrConnectWithoutWorkerInput | LogCreateOrConnectWithoutWorkerInput[]
    upsert?: LogUpsertWithWhereUniqueWithoutWorkerInput | LogUpsertWithWhereUniqueWithoutWorkerInput[]
    createMany?: LogCreateManyWorkerInputEnvelope
    set?: LogWhereUniqueInput | LogWhereUniqueInput[]
    disconnect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    delete?: LogWhereUniqueInput | LogWhereUniqueInput[]
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    update?: LogUpdateWithWhereUniqueWithoutWorkerInput | LogUpdateWithWhereUniqueWithoutWorkerInput[]
    updateMany?: LogUpdateManyWithWhereWithoutWorkerInput | LogUpdateManyWithWhereWithoutWorkerInput[]
    deleteMany?: LogScalarWhereInput | LogScalarWhereInput[]
  }

  export type PassCodeUpdateManyWithoutWorkerNestedInput = {
    create?: XOR<PassCodeCreateWithoutWorkerInput, PassCodeUncheckedCreateWithoutWorkerInput> | PassCodeCreateWithoutWorkerInput[] | PassCodeUncheckedCreateWithoutWorkerInput[]
    connectOrCreate?: PassCodeCreateOrConnectWithoutWorkerInput | PassCodeCreateOrConnectWithoutWorkerInput[]
    upsert?: PassCodeUpsertWithWhereUniqueWithoutWorkerInput | PassCodeUpsertWithWhereUniqueWithoutWorkerInput[]
    createMany?: PassCodeCreateManyWorkerInputEnvelope
    set?: PassCodeWhereUniqueInput | PassCodeWhereUniqueInput[]
    disconnect?: PassCodeWhereUniqueInput | PassCodeWhereUniqueInput[]
    delete?: PassCodeWhereUniqueInput | PassCodeWhereUniqueInput[]
    connect?: PassCodeWhereUniqueInput | PassCodeWhereUniqueInput[]
    update?: PassCodeUpdateWithWhereUniqueWithoutWorkerInput | PassCodeUpdateWithWhereUniqueWithoutWorkerInput[]
    updateMany?: PassCodeUpdateManyWithWhereWithoutWorkerInput | PassCodeUpdateManyWithWhereWithoutWorkerInput[]
    deleteMany?: PassCodeScalarWhereInput | PassCodeScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SubDomainUncheckedUpdateManyWithoutWorkerNestedInput = {
    create?: XOR<SubDomainCreateWithoutWorkerInput, SubDomainUncheckedCreateWithoutWorkerInput> | SubDomainCreateWithoutWorkerInput[] | SubDomainUncheckedCreateWithoutWorkerInput[]
    connectOrCreate?: SubDomainCreateOrConnectWithoutWorkerInput | SubDomainCreateOrConnectWithoutWorkerInput[]
    upsert?: SubDomainUpsertWithWhereUniqueWithoutWorkerInput | SubDomainUpsertWithWhereUniqueWithoutWorkerInput[]
    createMany?: SubDomainCreateManyWorkerInputEnvelope
    set?: SubDomainWhereUniqueInput | SubDomainWhereUniqueInput[]
    disconnect?: SubDomainWhereUniqueInput | SubDomainWhereUniqueInput[]
    delete?: SubDomainWhereUniqueInput | SubDomainWhereUniqueInput[]
    connect?: SubDomainWhereUniqueInput | SubDomainWhereUniqueInput[]
    update?: SubDomainUpdateWithWhereUniqueWithoutWorkerInput | SubDomainUpdateWithWhereUniqueWithoutWorkerInput[]
    updateMany?: SubDomainUpdateManyWithWhereWithoutWorkerInput | SubDomainUpdateManyWithWhereWithoutWorkerInput[]
    deleteMany?: SubDomainScalarWhereInput | SubDomainScalarWhereInput[]
  }

  export type LogUncheckedUpdateManyWithoutWorkerNestedInput = {
    create?: XOR<LogCreateWithoutWorkerInput, LogUncheckedCreateWithoutWorkerInput> | LogCreateWithoutWorkerInput[] | LogUncheckedCreateWithoutWorkerInput[]
    connectOrCreate?: LogCreateOrConnectWithoutWorkerInput | LogCreateOrConnectWithoutWorkerInput[]
    upsert?: LogUpsertWithWhereUniqueWithoutWorkerInput | LogUpsertWithWhereUniqueWithoutWorkerInput[]
    createMany?: LogCreateManyWorkerInputEnvelope
    set?: LogWhereUniqueInput | LogWhereUniqueInput[]
    disconnect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    delete?: LogWhereUniqueInput | LogWhereUniqueInput[]
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    update?: LogUpdateWithWhereUniqueWithoutWorkerInput | LogUpdateWithWhereUniqueWithoutWorkerInput[]
    updateMany?: LogUpdateManyWithWhereWithoutWorkerInput | LogUpdateManyWithWhereWithoutWorkerInput[]
    deleteMany?: LogScalarWhereInput | LogScalarWhereInput[]
  }

  export type PassCodeUncheckedUpdateManyWithoutWorkerNestedInput = {
    create?: XOR<PassCodeCreateWithoutWorkerInput, PassCodeUncheckedCreateWithoutWorkerInput> | PassCodeCreateWithoutWorkerInput[] | PassCodeUncheckedCreateWithoutWorkerInput[]
    connectOrCreate?: PassCodeCreateOrConnectWithoutWorkerInput | PassCodeCreateOrConnectWithoutWorkerInput[]
    upsert?: PassCodeUpsertWithWhereUniqueWithoutWorkerInput | PassCodeUpsertWithWhereUniqueWithoutWorkerInput[]
    createMany?: PassCodeCreateManyWorkerInputEnvelope
    set?: PassCodeWhereUniqueInput | PassCodeWhereUniqueInput[]
    disconnect?: PassCodeWhereUniqueInput | PassCodeWhereUniqueInput[]
    delete?: PassCodeWhereUniqueInput | PassCodeWhereUniqueInput[]
    connect?: PassCodeWhereUniqueInput | PassCodeWhereUniqueInput[]
    update?: PassCodeUpdateWithWhereUniqueWithoutWorkerInput | PassCodeUpdateWithWhereUniqueWithoutWorkerInput[]
    updateMany?: PassCodeUpdateManyWithWhereWithoutWorkerInput | PassCodeUpdateManyWithWhereWithoutWorkerInput[]
    deleteMany?: PassCodeScalarWhereInput | PassCodeScalarWhereInput[]
  }

  export type WorkerCreateNestedOneWithoutPassCodeInput = {
    create?: XOR<WorkerCreateWithoutPassCodeInput, WorkerUncheckedCreateWithoutPassCodeInput>
    connectOrCreate?: WorkerCreateOrConnectWithoutPassCodeInput
    connect?: WorkerWhereUniqueInput
  }

  export type LogCreateNestedOneWithoutPassCodeInput = {
    create?: XOR<LogCreateWithoutPassCodeInput, LogUncheckedCreateWithoutPassCodeInput>
    connectOrCreate?: LogCreateOrConnectWithoutPassCodeInput
    connect?: LogWhereUniqueInput
  }

  export type LogUncheckedCreateNestedOneWithoutPassCodeInput = {
    create?: XOR<LogCreateWithoutPassCodeInput, LogUncheckedCreateWithoutPassCodeInput>
    connectOrCreate?: LogCreateOrConnectWithoutPassCodeInput
    connect?: LogWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type WorkerUpdateOneWithoutPassCodeNestedInput = {
    create?: XOR<WorkerCreateWithoutPassCodeInput, WorkerUncheckedCreateWithoutPassCodeInput>
    connectOrCreate?: WorkerCreateOrConnectWithoutPassCodeInput
    upsert?: WorkerUpsertWithoutPassCodeInput
    disconnect?: WorkerWhereInput | boolean
    delete?: WorkerWhereInput | boolean
    connect?: WorkerWhereUniqueInput
    update?: XOR<XOR<WorkerUpdateToOneWithWhereWithoutPassCodeInput, WorkerUpdateWithoutPassCodeInput>, WorkerUncheckedUpdateWithoutPassCodeInput>
  }

  export type LogUpdateOneWithoutPassCodeNestedInput = {
    create?: XOR<LogCreateWithoutPassCodeInput, LogUncheckedCreateWithoutPassCodeInput>
    connectOrCreate?: LogCreateOrConnectWithoutPassCodeInput
    upsert?: LogUpsertWithoutPassCodeInput
    disconnect?: LogWhereInput | boolean
    delete?: LogWhereInput | boolean
    connect?: LogWhereUniqueInput
    update?: XOR<XOR<LogUpdateToOneWithWhereWithoutPassCodeInput, LogUpdateWithoutPassCodeInput>, LogUncheckedUpdateWithoutPassCodeInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type LogUncheckedUpdateOneWithoutPassCodeNestedInput = {
    create?: XOR<LogCreateWithoutPassCodeInput, LogUncheckedCreateWithoutPassCodeInput>
    connectOrCreate?: LogCreateOrConnectWithoutPassCodeInput
    upsert?: LogUpsertWithoutPassCodeInput
    disconnect?: LogWhereInput | boolean
    delete?: LogWhereInput | boolean
    connect?: LogWhereUniqueInput
    update?: XOR<XOR<LogUpdateToOneWithWhereWithoutPassCodeInput, LogUpdateWithoutPassCodeInput>, LogUncheckedUpdateWithoutPassCodeInput>
  }

  export type SubDomainCreateNestedManyWithoutDomainInput = {
    create?: XOR<SubDomainCreateWithoutDomainInput, SubDomainUncheckedCreateWithoutDomainInput> | SubDomainCreateWithoutDomainInput[] | SubDomainUncheckedCreateWithoutDomainInput[]
    connectOrCreate?: SubDomainCreateOrConnectWithoutDomainInput | SubDomainCreateOrConnectWithoutDomainInput[]
    createMany?: SubDomainCreateManyDomainInputEnvelope
    connect?: SubDomainWhereUniqueInput | SubDomainWhereUniqueInput[]
  }

  export type SubDomainUncheckedCreateNestedManyWithoutDomainInput = {
    create?: XOR<SubDomainCreateWithoutDomainInput, SubDomainUncheckedCreateWithoutDomainInput> | SubDomainCreateWithoutDomainInput[] | SubDomainUncheckedCreateWithoutDomainInput[]
    connectOrCreate?: SubDomainCreateOrConnectWithoutDomainInput | SubDomainCreateOrConnectWithoutDomainInput[]
    createMany?: SubDomainCreateManyDomainInputEnvelope
    connect?: SubDomainWhereUniqueInput | SubDomainWhereUniqueInput[]
  }

  export type SubDomainUpdateManyWithoutDomainNestedInput = {
    create?: XOR<SubDomainCreateWithoutDomainInput, SubDomainUncheckedCreateWithoutDomainInput> | SubDomainCreateWithoutDomainInput[] | SubDomainUncheckedCreateWithoutDomainInput[]
    connectOrCreate?: SubDomainCreateOrConnectWithoutDomainInput | SubDomainCreateOrConnectWithoutDomainInput[]
    upsert?: SubDomainUpsertWithWhereUniqueWithoutDomainInput | SubDomainUpsertWithWhereUniqueWithoutDomainInput[]
    createMany?: SubDomainCreateManyDomainInputEnvelope
    set?: SubDomainWhereUniqueInput | SubDomainWhereUniqueInput[]
    disconnect?: SubDomainWhereUniqueInput | SubDomainWhereUniqueInput[]
    delete?: SubDomainWhereUniqueInput | SubDomainWhereUniqueInput[]
    connect?: SubDomainWhereUniqueInput | SubDomainWhereUniqueInput[]
    update?: SubDomainUpdateWithWhereUniqueWithoutDomainInput | SubDomainUpdateWithWhereUniqueWithoutDomainInput[]
    updateMany?: SubDomainUpdateManyWithWhereWithoutDomainInput | SubDomainUpdateManyWithWhereWithoutDomainInput[]
    deleteMany?: SubDomainScalarWhereInput | SubDomainScalarWhereInput[]
  }

  export type SubDomainUncheckedUpdateManyWithoutDomainNestedInput = {
    create?: XOR<SubDomainCreateWithoutDomainInput, SubDomainUncheckedCreateWithoutDomainInput> | SubDomainCreateWithoutDomainInput[] | SubDomainUncheckedCreateWithoutDomainInput[]
    connectOrCreate?: SubDomainCreateOrConnectWithoutDomainInput | SubDomainCreateOrConnectWithoutDomainInput[]
    upsert?: SubDomainUpsertWithWhereUniqueWithoutDomainInput | SubDomainUpsertWithWhereUniqueWithoutDomainInput[]
    createMany?: SubDomainCreateManyDomainInputEnvelope
    set?: SubDomainWhereUniqueInput | SubDomainWhereUniqueInput[]
    disconnect?: SubDomainWhereUniqueInput | SubDomainWhereUniqueInput[]
    delete?: SubDomainWhereUniqueInput | SubDomainWhereUniqueInput[]
    connect?: SubDomainWhereUniqueInput | SubDomainWhereUniqueInput[]
    update?: SubDomainUpdateWithWhereUniqueWithoutDomainInput | SubDomainUpdateWithWhereUniqueWithoutDomainInput[]
    updateMany?: SubDomainUpdateManyWithWhereWithoutDomainInput | SubDomainUpdateManyWithWhereWithoutDomainInput[]
    deleteMany?: SubDomainScalarWhereInput | SubDomainScalarWhereInput[]
  }

  export type WorkerCreateNestedOneWithoutSubdomainsInput = {
    create?: XOR<WorkerCreateWithoutSubdomainsInput, WorkerUncheckedCreateWithoutSubdomainsInput>
    connectOrCreate?: WorkerCreateOrConnectWithoutSubdomainsInput
    connect?: WorkerWhereUniqueInput
  }

  export type DomainCreateNestedOneWithoutSubdomainsInput = {
    create?: XOR<DomainCreateWithoutSubdomainsInput, DomainUncheckedCreateWithoutSubdomainsInput>
    connectOrCreate?: DomainCreateOrConnectWithoutSubdomainsInput
    connect?: DomainWhereUniqueInput
  }

  export type LogCreateNestedManyWithoutSubDomainInput = {
    create?: XOR<LogCreateWithoutSubDomainInput, LogUncheckedCreateWithoutSubDomainInput> | LogCreateWithoutSubDomainInput[] | LogUncheckedCreateWithoutSubDomainInput[]
    connectOrCreate?: LogCreateOrConnectWithoutSubDomainInput | LogCreateOrConnectWithoutSubDomainInput[]
    createMany?: LogCreateManySubDomainInputEnvelope
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
  }

  export type SiteCreateNestedOneWithoutSubDomainInput = {
    create?: XOR<SiteCreateWithoutSubDomainInput, SiteUncheckedCreateWithoutSubDomainInput>
    connectOrCreate?: SiteCreateOrConnectWithoutSubDomainInput
    connect?: SiteWhereUniqueInput
  }

  export type LogUncheckedCreateNestedManyWithoutSubDomainInput = {
    create?: XOR<LogCreateWithoutSubDomainInput, LogUncheckedCreateWithoutSubDomainInput> | LogCreateWithoutSubDomainInput[] | LogUncheckedCreateWithoutSubDomainInput[]
    connectOrCreate?: LogCreateOrConnectWithoutSubDomainInput | LogCreateOrConnectWithoutSubDomainInput[]
    createMany?: LogCreateManySubDomainInputEnvelope
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
  }

  export type WorkerUpdateOneWithoutSubdomainsNestedInput = {
    create?: XOR<WorkerCreateWithoutSubdomainsInput, WorkerUncheckedCreateWithoutSubdomainsInput>
    connectOrCreate?: WorkerCreateOrConnectWithoutSubdomainsInput
    upsert?: WorkerUpsertWithoutSubdomainsInput
    disconnect?: WorkerWhereInput | boolean
    delete?: WorkerWhereInput | boolean
    connect?: WorkerWhereUniqueInput
    update?: XOR<XOR<WorkerUpdateToOneWithWhereWithoutSubdomainsInput, WorkerUpdateWithoutSubdomainsInput>, WorkerUncheckedUpdateWithoutSubdomainsInput>
  }

  export type DomainUpdateOneWithoutSubdomainsNestedInput = {
    create?: XOR<DomainCreateWithoutSubdomainsInput, DomainUncheckedCreateWithoutSubdomainsInput>
    connectOrCreate?: DomainCreateOrConnectWithoutSubdomainsInput
    upsert?: DomainUpsertWithoutSubdomainsInput
    disconnect?: DomainWhereInput | boolean
    delete?: DomainWhereInput | boolean
    connect?: DomainWhereUniqueInput
    update?: XOR<XOR<DomainUpdateToOneWithWhereWithoutSubdomainsInput, DomainUpdateWithoutSubdomainsInput>, DomainUncheckedUpdateWithoutSubdomainsInput>
  }

  export type LogUpdateManyWithoutSubDomainNestedInput = {
    create?: XOR<LogCreateWithoutSubDomainInput, LogUncheckedCreateWithoutSubDomainInput> | LogCreateWithoutSubDomainInput[] | LogUncheckedCreateWithoutSubDomainInput[]
    connectOrCreate?: LogCreateOrConnectWithoutSubDomainInput | LogCreateOrConnectWithoutSubDomainInput[]
    upsert?: LogUpsertWithWhereUniqueWithoutSubDomainInput | LogUpsertWithWhereUniqueWithoutSubDomainInput[]
    createMany?: LogCreateManySubDomainInputEnvelope
    set?: LogWhereUniqueInput | LogWhereUniqueInput[]
    disconnect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    delete?: LogWhereUniqueInput | LogWhereUniqueInput[]
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    update?: LogUpdateWithWhereUniqueWithoutSubDomainInput | LogUpdateWithWhereUniqueWithoutSubDomainInput[]
    updateMany?: LogUpdateManyWithWhereWithoutSubDomainInput | LogUpdateManyWithWhereWithoutSubDomainInput[]
    deleteMany?: LogScalarWhereInput | LogScalarWhereInput[]
  }

  export type SiteUpdateOneWithoutSubDomainNestedInput = {
    create?: XOR<SiteCreateWithoutSubDomainInput, SiteUncheckedCreateWithoutSubDomainInput>
    connectOrCreate?: SiteCreateOrConnectWithoutSubDomainInput
    upsert?: SiteUpsertWithoutSubDomainInput
    disconnect?: SiteWhereInput | boolean
    delete?: SiteWhereInput | boolean
    connect?: SiteWhereUniqueInput
    update?: XOR<XOR<SiteUpdateToOneWithWhereWithoutSubDomainInput, SiteUpdateWithoutSubDomainInput>, SiteUncheckedUpdateWithoutSubDomainInput>
  }

  export type LogUncheckedUpdateManyWithoutSubDomainNestedInput = {
    create?: XOR<LogCreateWithoutSubDomainInput, LogUncheckedCreateWithoutSubDomainInput> | LogCreateWithoutSubDomainInput[] | LogUncheckedCreateWithoutSubDomainInput[]
    connectOrCreate?: LogCreateOrConnectWithoutSubDomainInput | LogCreateOrConnectWithoutSubDomainInput[]
    upsert?: LogUpsertWithWhereUniqueWithoutSubDomainInput | LogUpsertWithWhereUniqueWithoutSubDomainInput[]
    createMany?: LogCreateManySubDomainInputEnvelope
    set?: LogWhereUniqueInput | LogWhereUniqueInput[]
    disconnect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    delete?: LogWhereUniqueInput | LogWhereUniqueInput[]
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    update?: LogUpdateWithWhereUniqueWithoutSubDomainInput | LogUpdateWithWhereUniqueWithoutSubDomainInput[]
    updateMany?: LogUpdateManyWithWhereWithoutSubDomainInput | LogUpdateManyWithWhereWithoutSubDomainInput[]
    deleteMany?: LogScalarWhereInput | LogScalarWhereInput[]
  }

  export type SubDomainCreateNestedManyWithoutSiteInput = {
    create?: XOR<SubDomainCreateWithoutSiteInput, SubDomainUncheckedCreateWithoutSiteInput> | SubDomainCreateWithoutSiteInput[] | SubDomainUncheckedCreateWithoutSiteInput[]
    connectOrCreate?: SubDomainCreateOrConnectWithoutSiteInput | SubDomainCreateOrConnectWithoutSiteInput[]
    createMany?: SubDomainCreateManySiteInputEnvelope
    connect?: SubDomainWhereUniqueInput | SubDomainWhereUniqueInput[]
  }

  export type SubDomainUncheckedCreateNestedManyWithoutSiteInput = {
    create?: XOR<SubDomainCreateWithoutSiteInput, SubDomainUncheckedCreateWithoutSiteInput> | SubDomainCreateWithoutSiteInput[] | SubDomainUncheckedCreateWithoutSiteInput[]
    connectOrCreate?: SubDomainCreateOrConnectWithoutSiteInput | SubDomainCreateOrConnectWithoutSiteInput[]
    createMany?: SubDomainCreateManySiteInputEnvelope
    connect?: SubDomainWhereUniqueInput | SubDomainWhereUniqueInput[]
  }

  export type SubDomainUpdateManyWithoutSiteNestedInput = {
    create?: XOR<SubDomainCreateWithoutSiteInput, SubDomainUncheckedCreateWithoutSiteInput> | SubDomainCreateWithoutSiteInput[] | SubDomainUncheckedCreateWithoutSiteInput[]
    connectOrCreate?: SubDomainCreateOrConnectWithoutSiteInput | SubDomainCreateOrConnectWithoutSiteInput[]
    upsert?: SubDomainUpsertWithWhereUniqueWithoutSiteInput | SubDomainUpsertWithWhereUniqueWithoutSiteInput[]
    createMany?: SubDomainCreateManySiteInputEnvelope
    set?: SubDomainWhereUniqueInput | SubDomainWhereUniqueInput[]
    disconnect?: SubDomainWhereUniqueInput | SubDomainWhereUniqueInput[]
    delete?: SubDomainWhereUniqueInput | SubDomainWhereUniqueInput[]
    connect?: SubDomainWhereUniqueInput | SubDomainWhereUniqueInput[]
    update?: SubDomainUpdateWithWhereUniqueWithoutSiteInput | SubDomainUpdateWithWhereUniqueWithoutSiteInput[]
    updateMany?: SubDomainUpdateManyWithWhereWithoutSiteInput | SubDomainUpdateManyWithWhereWithoutSiteInput[]
    deleteMany?: SubDomainScalarWhereInput | SubDomainScalarWhereInput[]
  }

  export type SubDomainUncheckedUpdateManyWithoutSiteNestedInput = {
    create?: XOR<SubDomainCreateWithoutSiteInput, SubDomainUncheckedCreateWithoutSiteInput> | SubDomainCreateWithoutSiteInput[] | SubDomainUncheckedCreateWithoutSiteInput[]
    connectOrCreate?: SubDomainCreateOrConnectWithoutSiteInput | SubDomainCreateOrConnectWithoutSiteInput[]
    upsert?: SubDomainUpsertWithWhereUniqueWithoutSiteInput | SubDomainUpsertWithWhereUniqueWithoutSiteInput[]
    createMany?: SubDomainCreateManySiteInputEnvelope
    set?: SubDomainWhereUniqueInput | SubDomainWhereUniqueInput[]
    disconnect?: SubDomainWhereUniqueInput | SubDomainWhereUniqueInput[]
    delete?: SubDomainWhereUniqueInput | SubDomainWhereUniqueInput[]
    connect?: SubDomainWhereUniqueInput | SubDomainWhereUniqueInput[]
    update?: SubDomainUpdateWithWhereUniqueWithoutSiteInput | SubDomainUpdateWithWhereUniqueWithoutSiteInput[]
    updateMany?: SubDomainUpdateManyWithWhereWithoutSiteInput | SubDomainUpdateManyWithWhereWithoutSiteInput[]
    deleteMany?: SubDomainScalarWhereInput | SubDomainScalarWhereInput[]
  }

  export type WorkerCreateNestedOneWithoutLogsInput = {
    create?: XOR<WorkerCreateWithoutLogsInput, WorkerUncheckedCreateWithoutLogsInput>
    connectOrCreate?: WorkerCreateOrConnectWithoutLogsInput
    connect?: WorkerWhereUniqueInput
  }

  export type SubDomainCreateNestedOneWithoutLogsInput = {
    create?: XOR<SubDomainCreateWithoutLogsInput, SubDomainUncheckedCreateWithoutLogsInput>
    connectOrCreate?: SubDomainCreateOrConnectWithoutLogsInput
    connect?: SubDomainWhereUniqueInput
  }

  export type PassCodeCreateNestedOneWithoutLogInput = {
    create?: XOR<PassCodeCreateWithoutLogInput, PassCodeUncheckedCreateWithoutLogInput>
    connectOrCreate?: PassCodeCreateOrConnectWithoutLogInput
    connect?: PassCodeWhereUniqueInput
  }

  export type WorkerUpdateOneWithoutLogsNestedInput = {
    create?: XOR<WorkerCreateWithoutLogsInput, WorkerUncheckedCreateWithoutLogsInput>
    connectOrCreate?: WorkerCreateOrConnectWithoutLogsInput
    upsert?: WorkerUpsertWithoutLogsInput
    disconnect?: WorkerWhereInput | boolean
    delete?: WorkerWhereInput | boolean
    connect?: WorkerWhereUniqueInput
    update?: XOR<XOR<WorkerUpdateToOneWithWhereWithoutLogsInput, WorkerUpdateWithoutLogsInput>, WorkerUncheckedUpdateWithoutLogsInput>
  }

  export type SubDomainUpdateOneWithoutLogsNestedInput = {
    create?: XOR<SubDomainCreateWithoutLogsInput, SubDomainUncheckedCreateWithoutLogsInput>
    connectOrCreate?: SubDomainCreateOrConnectWithoutLogsInput
    upsert?: SubDomainUpsertWithoutLogsInput
    disconnect?: SubDomainWhereInput | boolean
    delete?: SubDomainWhereInput | boolean
    connect?: SubDomainWhereUniqueInput
    update?: XOR<XOR<SubDomainUpdateToOneWithWhereWithoutLogsInput, SubDomainUpdateWithoutLogsInput>, SubDomainUncheckedUpdateWithoutLogsInput>
  }

  export type PassCodeUpdateOneWithoutLogNestedInput = {
    create?: XOR<PassCodeCreateWithoutLogInput, PassCodeUncheckedCreateWithoutLogInput>
    connectOrCreate?: PassCodeCreateOrConnectWithoutLogInput
    upsert?: PassCodeUpsertWithoutLogInput
    disconnect?: PassCodeWhereInput | boolean
    delete?: PassCodeWhereInput | boolean
    connect?: PassCodeWhereUniqueInput
    update?: XOR<XOR<PassCodeUpdateToOneWithWhereWithoutLogInput, PassCodeUpdateWithoutLogInput>, PassCodeUncheckedUpdateWithoutLogInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type SubDomainCreateWithoutWorkerInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    prefix: string
    domain?: DomainCreateNestedOneWithoutSubdomainsInput
    logs?: LogCreateNestedManyWithoutSubDomainInput
    site?: SiteCreateNestedOneWithoutSubDomainInput
  }

  export type SubDomainUncheckedCreateWithoutWorkerInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    domainId?: number | null
    siteId?: number | null
    prefix: string
    logs?: LogUncheckedCreateNestedManyWithoutSubDomainInput
  }

  export type SubDomainCreateOrConnectWithoutWorkerInput = {
    where: SubDomainWhereUniqueInput
    create: XOR<SubDomainCreateWithoutWorkerInput, SubDomainUncheckedCreateWithoutWorkerInput>
  }

  export type SubDomainCreateManyWorkerInputEnvelope = {
    data: SubDomainCreateManyWorkerInput | SubDomainCreateManyWorkerInput[]
    skipDuplicates?: boolean
  }

  export type LogCreateWithoutWorkerInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    comment?: string | null
    ip?: string | null
    userAgent?: string | null
    subDomain?: SubDomainCreateNestedOneWithoutLogsInput
    passCode?: PassCodeCreateNestedOneWithoutLogInput
  }

  export type LogUncheckedCreateWithoutWorkerInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    comment?: string | null
    ip?: string | null
    userAgent?: string | null
    subDomainId?: number | null
    passCodeId?: string | null
  }

  export type LogCreateOrConnectWithoutWorkerInput = {
    where: LogWhereUniqueInput
    create: XOR<LogCreateWithoutWorkerInput, LogUncheckedCreateWithoutWorkerInput>
  }

  export type LogCreateManyWorkerInputEnvelope = {
    data: LogCreateManyWorkerInput | LogCreateManyWorkerInput[]
    skipDuplicates?: boolean
  }

  export type PassCodeCreateWithoutWorkerInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    active?: boolean
    log?: LogCreateNestedOneWithoutPassCodeInput
  }

  export type PassCodeUncheckedCreateWithoutWorkerInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    active?: boolean
    log?: LogUncheckedCreateNestedOneWithoutPassCodeInput
  }

  export type PassCodeCreateOrConnectWithoutWorkerInput = {
    where: PassCodeWhereUniqueInput
    create: XOR<PassCodeCreateWithoutWorkerInput, PassCodeUncheckedCreateWithoutWorkerInput>
  }

  export type PassCodeCreateManyWorkerInputEnvelope = {
    data: PassCodeCreateManyWorkerInput | PassCodeCreateManyWorkerInput[]
    skipDuplicates?: boolean
  }

  export type SubDomainUpsertWithWhereUniqueWithoutWorkerInput = {
    where: SubDomainWhereUniqueInput
    update: XOR<SubDomainUpdateWithoutWorkerInput, SubDomainUncheckedUpdateWithoutWorkerInput>
    create: XOR<SubDomainCreateWithoutWorkerInput, SubDomainUncheckedCreateWithoutWorkerInput>
  }

  export type SubDomainUpdateWithWhereUniqueWithoutWorkerInput = {
    where: SubDomainWhereUniqueInput
    data: XOR<SubDomainUpdateWithoutWorkerInput, SubDomainUncheckedUpdateWithoutWorkerInput>
  }

  export type SubDomainUpdateManyWithWhereWithoutWorkerInput = {
    where: SubDomainScalarWhereInput
    data: XOR<SubDomainUpdateManyMutationInput, SubDomainUncheckedUpdateManyWithoutWorkerInput>
  }

  export type SubDomainScalarWhereInput = {
    AND?: SubDomainScalarWhereInput | SubDomainScalarWhereInput[]
    OR?: SubDomainScalarWhereInput[]
    NOT?: SubDomainScalarWhereInput | SubDomainScalarWhereInput[]
    id?: IntFilter<"SubDomain"> | number
    createdAt?: DateTimeFilter<"SubDomain"> | Date | string
    updatedAt?: DateTimeFilter<"SubDomain"> | Date | string
    workerId?: IntNullableFilter<"SubDomain"> | number | null
    domainId?: IntNullableFilter<"SubDomain"> | number | null
    siteId?: IntNullableFilter<"SubDomain"> | number | null
    prefix?: StringFilter<"SubDomain"> | string
  }

  export type LogUpsertWithWhereUniqueWithoutWorkerInput = {
    where: LogWhereUniqueInput
    update: XOR<LogUpdateWithoutWorkerInput, LogUncheckedUpdateWithoutWorkerInput>
    create: XOR<LogCreateWithoutWorkerInput, LogUncheckedCreateWithoutWorkerInput>
  }

  export type LogUpdateWithWhereUniqueWithoutWorkerInput = {
    where: LogWhereUniqueInput
    data: XOR<LogUpdateWithoutWorkerInput, LogUncheckedUpdateWithoutWorkerInput>
  }

  export type LogUpdateManyWithWhereWithoutWorkerInput = {
    where: LogScalarWhereInput
    data: XOR<LogUpdateManyMutationInput, LogUncheckedUpdateManyWithoutWorkerInput>
  }

  export type LogScalarWhereInput = {
    AND?: LogScalarWhereInput | LogScalarWhereInput[]
    OR?: LogScalarWhereInput[]
    NOT?: LogScalarWhereInput | LogScalarWhereInput[]
    id?: IntFilter<"Log"> | number
    createdAt?: DateTimeFilter<"Log"> | Date | string
    updatedAt?: DateTimeFilter<"Log"> | Date | string
    comment?: StringNullableFilter<"Log"> | string | null
    ip?: StringNullableFilter<"Log"> | string | null
    userAgent?: StringNullableFilter<"Log"> | string | null
    workerId?: IntNullableFilter<"Log"> | number | null
    subDomainId?: IntNullableFilter<"Log"> | number | null
    passCodeId?: StringNullableFilter<"Log"> | string | null
  }

  export type PassCodeUpsertWithWhereUniqueWithoutWorkerInput = {
    where: PassCodeWhereUniqueInput
    update: XOR<PassCodeUpdateWithoutWorkerInput, PassCodeUncheckedUpdateWithoutWorkerInput>
    create: XOR<PassCodeCreateWithoutWorkerInput, PassCodeUncheckedCreateWithoutWorkerInput>
  }

  export type PassCodeUpdateWithWhereUniqueWithoutWorkerInput = {
    where: PassCodeWhereUniqueInput
    data: XOR<PassCodeUpdateWithoutWorkerInput, PassCodeUncheckedUpdateWithoutWorkerInput>
  }

  export type PassCodeUpdateManyWithWhereWithoutWorkerInput = {
    where: PassCodeScalarWhereInput
    data: XOR<PassCodeUpdateManyMutationInput, PassCodeUncheckedUpdateManyWithoutWorkerInput>
  }

  export type PassCodeScalarWhereInput = {
    AND?: PassCodeScalarWhereInput | PassCodeScalarWhereInput[]
    OR?: PassCodeScalarWhereInput[]
    NOT?: PassCodeScalarWhereInput | PassCodeScalarWhereInput[]
    id?: StringFilter<"PassCode"> | string
    createdAt?: DateTimeFilter<"PassCode"> | Date | string
    updatedAt?: DateTimeFilter<"PassCode"> | Date | string
    workerId?: IntNullableFilter<"PassCode"> | number | null
    active?: BoolFilter<"PassCode"> | boolean
  }

  export type WorkerCreateWithoutPassCodeInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    secretKey?: string | null
    telegramId: string
    blocked?: boolean | null
    username?: string | null
    subdomains?: SubDomainCreateNestedManyWithoutWorkerInput
    logs?: LogCreateNestedManyWithoutWorkerInput
  }

  export type WorkerUncheckedCreateWithoutPassCodeInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    secretKey?: string | null
    telegramId: string
    blocked?: boolean | null
    username?: string | null
    subdomains?: SubDomainUncheckedCreateNestedManyWithoutWorkerInput
    logs?: LogUncheckedCreateNestedManyWithoutWorkerInput
  }

  export type WorkerCreateOrConnectWithoutPassCodeInput = {
    where: WorkerWhereUniqueInput
    create: XOR<WorkerCreateWithoutPassCodeInput, WorkerUncheckedCreateWithoutPassCodeInput>
  }

  export type LogCreateWithoutPassCodeInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    comment?: string | null
    ip?: string | null
    userAgent?: string | null
    worker?: WorkerCreateNestedOneWithoutLogsInput
    subDomain?: SubDomainCreateNestedOneWithoutLogsInput
  }

  export type LogUncheckedCreateWithoutPassCodeInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    comment?: string | null
    ip?: string | null
    userAgent?: string | null
    workerId?: number | null
    subDomainId?: number | null
  }

  export type LogCreateOrConnectWithoutPassCodeInput = {
    where: LogWhereUniqueInput
    create: XOR<LogCreateWithoutPassCodeInput, LogUncheckedCreateWithoutPassCodeInput>
  }

  export type WorkerUpsertWithoutPassCodeInput = {
    update: XOR<WorkerUpdateWithoutPassCodeInput, WorkerUncheckedUpdateWithoutPassCodeInput>
    create: XOR<WorkerCreateWithoutPassCodeInput, WorkerUncheckedCreateWithoutPassCodeInput>
    where?: WorkerWhereInput
  }

  export type WorkerUpdateToOneWithWhereWithoutPassCodeInput = {
    where?: WorkerWhereInput
    data: XOR<WorkerUpdateWithoutPassCodeInput, WorkerUncheckedUpdateWithoutPassCodeInput>
  }

  export type WorkerUpdateWithoutPassCodeInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    telegramId?: StringFieldUpdateOperationsInput | string
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    subdomains?: SubDomainUpdateManyWithoutWorkerNestedInput
    logs?: LogUpdateManyWithoutWorkerNestedInput
  }

  export type WorkerUncheckedUpdateWithoutPassCodeInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    telegramId?: StringFieldUpdateOperationsInput | string
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    subdomains?: SubDomainUncheckedUpdateManyWithoutWorkerNestedInput
    logs?: LogUncheckedUpdateManyWithoutWorkerNestedInput
  }

  export type LogUpsertWithoutPassCodeInput = {
    update: XOR<LogUpdateWithoutPassCodeInput, LogUncheckedUpdateWithoutPassCodeInput>
    create: XOR<LogCreateWithoutPassCodeInput, LogUncheckedCreateWithoutPassCodeInput>
    where?: LogWhereInput
  }

  export type LogUpdateToOneWithWhereWithoutPassCodeInput = {
    where?: LogWhereInput
    data: XOR<LogUpdateWithoutPassCodeInput, LogUncheckedUpdateWithoutPassCodeInput>
  }

  export type LogUpdateWithoutPassCodeInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    worker?: WorkerUpdateOneWithoutLogsNestedInput
    subDomain?: SubDomainUpdateOneWithoutLogsNestedInput
  }

  export type LogUncheckedUpdateWithoutPassCodeInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    workerId?: NullableIntFieldUpdateOperationsInput | number | null
    subDomainId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SubDomainCreateWithoutDomainInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    prefix: string
    worker?: WorkerCreateNestedOneWithoutSubdomainsInput
    logs?: LogCreateNestedManyWithoutSubDomainInput
    site?: SiteCreateNestedOneWithoutSubDomainInput
  }

  export type SubDomainUncheckedCreateWithoutDomainInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    workerId?: number | null
    siteId?: number | null
    prefix: string
    logs?: LogUncheckedCreateNestedManyWithoutSubDomainInput
  }

  export type SubDomainCreateOrConnectWithoutDomainInput = {
    where: SubDomainWhereUniqueInput
    create: XOR<SubDomainCreateWithoutDomainInput, SubDomainUncheckedCreateWithoutDomainInput>
  }

  export type SubDomainCreateManyDomainInputEnvelope = {
    data: SubDomainCreateManyDomainInput | SubDomainCreateManyDomainInput[]
    skipDuplicates?: boolean
  }

  export type SubDomainUpsertWithWhereUniqueWithoutDomainInput = {
    where: SubDomainWhereUniqueInput
    update: XOR<SubDomainUpdateWithoutDomainInput, SubDomainUncheckedUpdateWithoutDomainInput>
    create: XOR<SubDomainCreateWithoutDomainInput, SubDomainUncheckedCreateWithoutDomainInput>
  }

  export type SubDomainUpdateWithWhereUniqueWithoutDomainInput = {
    where: SubDomainWhereUniqueInput
    data: XOR<SubDomainUpdateWithoutDomainInput, SubDomainUncheckedUpdateWithoutDomainInput>
  }

  export type SubDomainUpdateManyWithWhereWithoutDomainInput = {
    where: SubDomainScalarWhereInput
    data: XOR<SubDomainUpdateManyMutationInput, SubDomainUncheckedUpdateManyWithoutDomainInput>
  }

  export type WorkerCreateWithoutSubdomainsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    secretKey?: string | null
    telegramId: string
    blocked?: boolean | null
    username?: string | null
    logs?: LogCreateNestedManyWithoutWorkerInput
    passCode?: PassCodeCreateNestedManyWithoutWorkerInput
  }

  export type WorkerUncheckedCreateWithoutSubdomainsInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    secretKey?: string | null
    telegramId: string
    blocked?: boolean | null
    username?: string | null
    logs?: LogUncheckedCreateNestedManyWithoutWorkerInput
    passCode?: PassCodeUncheckedCreateNestedManyWithoutWorkerInput
  }

  export type WorkerCreateOrConnectWithoutSubdomainsInput = {
    where: WorkerWhereUniqueInput
    create: XOR<WorkerCreateWithoutSubdomainsInput, WorkerUncheckedCreateWithoutSubdomainsInput>
  }

  export type DomainCreateWithoutSubdomainsInput = {
    domain: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status: boolean
    cfId: string
  }

  export type DomainUncheckedCreateWithoutSubdomainsInput = {
    id?: number
    domain: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status: boolean
    cfId: string
  }

  export type DomainCreateOrConnectWithoutSubdomainsInput = {
    where: DomainWhereUniqueInput
    create: XOR<DomainCreateWithoutSubdomainsInput, DomainUncheckedCreateWithoutSubdomainsInput>
  }

  export type LogCreateWithoutSubDomainInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    comment?: string | null
    ip?: string | null
    userAgent?: string | null
    worker?: WorkerCreateNestedOneWithoutLogsInput
    passCode?: PassCodeCreateNestedOneWithoutLogInput
  }

  export type LogUncheckedCreateWithoutSubDomainInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    comment?: string | null
    ip?: string | null
    userAgent?: string | null
    workerId?: number | null
    passCodeId?: string | null
  }

  export type LogCreateOrConnectWithoutSubDomainInput = {
    where: LogWhereUniqueInput
    create: XOR<LogCreateWithoutSubDomainInput, LogUncheckedCreateWithoutSubDomainInput>
  }

  export type LogCreateManySubDomainInputEnvelope = {
    data: LogCreateManySubDomainInput | LogCreateManySubDomainInput[]
    skipDuplicates?: boolean
  }

  export type SiteCreateWithoutSubDomainInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    ip: string
    name?: string | null
    status: boolean
  }

  export type SiteUncheckedCreateWithoutSubDomainInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    ip: string
    name?: string | null
    status: boolean
  }

  export type SiteCreateOrConnectWithoutSubDomainInput = {
    where: SiteWhereUniqueInput
    create: XOR<SiteCreateWithoutSubDomainInput, SiteUncheckedCreateWithoutSubDomainInput>
  }

  export type WorkerUpsertWithoutSubdomainsInput = {
    update: XOR<WorkerUpdateWithoutSubdomainsInput, WorkerUncheckedUpdateWithoutSubdomainsInput>
    create: XOR<WorkerCreateWithoutSubdomainsInput, WorkerUncheckedCreateWithoutSubdomainsInput>
    where?: WorkerWhereInput
  }

  export type WorkerUpdateToOneWithWhereWithoutSubdomainsInput = {
    where?: WorkerWhereInput
    data: XOR<WorkerUpdateWithoutSubdomainsInput, WorkerUncheckedUpdateWithoutSubdomainsInput>
  }

  export type WorkerUpdateWithoutSubdomainsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    telegramId?: StringFieldUpdateOperationsInput | string
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    logs?: LogUpdateManyWithoutWorkerNestedInput
    passCode?: PassCodeUpdateManyWithoutWorkerNestedInput
  }

  export type WorkerUncheckedUpdateWithoutSubdomainsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    telegramId?: StringFieldUpdateOperationsInput | string
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    logs?: LogUncheckedUpdateManyWithoutWorkerNestedInput
    passCode?: PassCodeUncheckedUpdateManyWithoutWorkerNestedInput
  }

  export type DomainUpsertWithoutSubdomainsInput = {
    update: XOR<DomainUpdateWithoutSubdomainsInput, DomainUncheckedUpdateWithoutSubdomainsInput>
    create: XOR<DomainCreateWithoutSubdomainsInput, DomainUncheckedCreateWithoutSubdomainsInput>
    where?: DomainWhereInput
  }

  export type DomainUpdateToOneWithWhereWithoutSubdomainsInput = {
    where?: DomainWhereInput
    data: XOR<DomainUpdateWithoutSubdomainsInput, DomainUncheckedUpdateWithoutSubdomainsInput>
  }

  export type DomainUpdateWithoutSubdomainsInput = {
    domain?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
    cfId?: StringFieldUpdateOperationsInput | string
  }

  export type DomainUncheckedUpdateWithoutSubdomainsInput = {
    id?: IntFieldUpdateOperationsInput | number
    domain?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
    cfId?: StringFieldUpdateOperationsInput | string
  }

  export type LogUpsertWithWhereUniqueWithoutSubDomainInput = {
    where: LogWhereUniqueInput
    update: XOR<LogUpdateWithoutSubDomainInput, LogUncheckedUpdateWithoutSubDomainInput>
    create: XOR<LogCreateWithoutSubDomainInput, LogUncheckedCreateWithoutSubDomainInput>
  }

  export type LogUpdateWithWhereUniqueWithoutSubDomainInput = {
    where: LogWhereUniqueInput
    data: XOR<LogUpdateWithoutSubDomainInput, LogUncheckedUpdateWithoutSubDomainInput>
  }

  export type LogUpdateManyWithWhereWithoutSubDomainInput = {
    where: LogScalarWhereInput
    data: XOR<LogUpdateManyMutationInput, LogUncheckedUpdateManyWithoutSubDomainInput>
  }

  export type SiteUpsertWithoutSubDomainInput = {
    update: XOR<SiteUpdateWithoutSubDomainInput, SiteUncheckedUpdateWithoutSubDomainInput>
    create: XOR<SiteCreateWithoutSubDomainInput, SiteUncheckedCreateWithoutSubDomainInput>
    where?: SiteWhereInput
  }

  export type SiteUpdateToOneWithWhereWithoutSubDomainInput = {
    where?: SiteWhereInput
    data: XOR<SiteUpdateWithoutSubDomainInput, SiteUncheckedUpdateWithoutSubDomainInput>
  }

  export type SiteUpdateWithoutSubDomainInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ip?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SiteUncheckedUpdateWithoutSubDomainInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ip?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SubDomainCreateWithoutSiteInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    prefix: string
    worker?: WorkerCreateNestedOneWithoutSubdomainsInput
    domain?: DomainCreateNestedOneWithoutSubdomainsInput
    logs?: LogCreateNestedManyWithoutSubDomainInput
  }

  export type SubDomainUncheckedCreateWithoutSiteInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    workerId?: number | null
    domainId?: number | null
    prefix: string
    logs?: LogUncheckedCreateNestedManyWithoutSubDomainInput
  }

  export type SubDomainCreateOrConnectWithoutSiteInput = {
    where: SubDomainWhereUniqueInput
    create: XOR<SubDomainCreateWithoutSiteInput, SubDomainUncheckedCreateWithoutSiteInput>
  }

  export type SubDomainCreateManySiteInputEnvelope = {
    data: SubDomainCreateManySiteInput | SubDomainCreateManySiteInput[]
    skipDuplicates?: boolean
  }

  export type SubDomainUpsertWithWhereUniqueWithoutSiteInput = {
    where: SubDomainWhereUniqueInput
    update: XOR<SubDomainUpdateWithoutSiteInput, SubDomainUncheckedUpdateWithoutSiteInput>
    create: XOR<SubDomainCreateWithoutSiteInput, SubDomainUncheckedCreateWithoutSiteInput>
  }

  export type SubDomainUpdateWithWhereUniqueWithoutSiteInput = {
    where: SubDomainWhereUniqueInput
    data: XOR<SubDomainUpdateWithoutSiteInput, SubDomainUncheckedUpdateWithoutSiteInput>
  }

  export type SubDomainUpdateManyWithWhereWithoutSiteInput = {
    where: SubDomainScalarWhereInput
    data: XOR<SubDomainUpdateManyMutationInput, SubDomainUncheckedUpdateManyWithoutSiteInput>
  }

  export type WorkerCreateWithoutLogsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    secretKey?: string | null
    telegramId: string
    blocked?: boolean | null
    username?: string | null
    subdomains?: SubDomainCreateNestedManyWithoutWorkerInput
    passCode?: PassCodeCreateNestedManyWithoutWorkerInput
  }

  export type WorkerUncheckedCreateWithoutLogsInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    secretKey?: string | null
    telegramId: string
    blocked?: boolean | null
    username?: string | null
    subdomains?: SubDomainUncheckedCreateNestedManyWithoutWorkerInput
    passCode?: PassCodeUncheckedCreateNestedManyWithoutWorkerInput
  }

  export type WorkerCreateOrConnectWithoutLogsInput = {
    where: WorkerWhereUniqueInput
    create: XOR<WorkerCreateWithoutLogsInput, WorkerUncheckedCreateWithoutLogsInput>
  }

  export type SubDomainCreateWithoutLogsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    prefix: string
    worker?: WorkerCreateNestedOneWithoutSubdomainsInput
    domain?: DomainCreateNestedOneWithoutSubdomainsInput
    site?: SiteCreateNestedOneWithoutSubDomainInput
  }

  export type SubDomainUncheckedCreateWithoutLogsInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    workerId?: number | null
    domainId?: number | null
    siteId?: number | null
    prefix: string
  }

  export type SubDomainCreateOrConnectWithoutLogsInput = {
    where: SubDomainWhereUniqueInput
    create: XOR<SubDomainCreateWithoutLogsInput, SubDomainUncheckedCreateWithoutLogsInput>
  }

  export type PassCodeCreateWithoutLogInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    active?: boolean
    worker?: WorkerCreateNestedOneWithoutPassCodeInput
  }

  export type PassCodeUncheckedCreateWithoutLogInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    workerId?: number | null
    active?: boolean
  }

  export type PassCodeCreateOrConnectWithoutLogInput = {
    where: PassCodeWhereUniqueInput
    create: XOR<PassCodeCreateWithoutLogInput, PassCodeUncheckedCreateWithoutLogInput>
  }

  export type WorkerUpsertWithoutLogsInput = {
    update: XOR<WorkerUpdateWithoutLogsInput, WorkerUncheckedUpdateWithoutLogsInput>
    create: XOR<WorkerCreateWithoutLogsInput, WorkerUncheckedCreateWithoutLogsInput>
    where?: WorkerWhereInput
  }

  export type WorkerUpdateToOneWithWhereWithoutLogsInput = {
    where?: WorkerWhereInput
    data: XOR<WorkerUpdateWithoutLogsInput, WorkerUncheckedUpdateWithoutLogsInput>
  }

  export type WorkerUpdateWithoutLogsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    telegramId?: StringFieldUpdateOperationsInput | string
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    subdomains?: SubDomainUpdateManyWithoutWorkerNestedInput
    passCode?: PassCodeUpdateManyWithoutWorkerNestedInput
  }

  export type WorkerUncheckedUpdateWithoutLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    telegramId?: StringFieldUpdateOperationsInput | string
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    subdomains?: SubDomainUncheckedUpdateManyWithoutWorkerNestedInput
    passCode?: PassCodeUncheckedUpdateManyWithoutWorkerNestedInput
  }

  export type SubDomainUpsertWithoutLogsInput = {
    update: XOR<SubDomainUpdateWithoutLogsInput, SubDomainUncheckedUpdateWithoutLogsInput>
    create: XOR<SubDomainCreateWithoutLogsInput, SubDomainUncheckedCreateWithoutLogsInput>
    where?: SubDomainWhereInput
  }

  export type SubDomainUpdateToOneWithWhereWithoutLogsInput = {
    where?: SubDomainWhereInput
    data: XOR<SubDomainUpdateWithoutLogsInput, SubDomainUncheckedUpdateWithoutLogsInput>
  }

  export type SubDomainUpdateWithoutLogsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    prefix?: StringFieldUpdateOperationsInput | string
    worker?: WorkerUpdateOneWithoutSubdomainsNestedInput
    domain?: DomainUpdateOneWithoutSubdomainsNestedInput
    site?: SiteUpdateOneWithoutSubDomainNestedInput
  }

  export type SubDomainUncheckedUpdateWithoutLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workerId?: NullableIntFieldUpdateOperationsInput | number | null
    domainId?: NullableIntFieldUpdateOperationsInput | number | null
    siteId?: NullableIntFieldUpdateOperationsInput | number | null
    prefix?: StringFieldUpdateOperationsInput | string
  }

  export type PassCodeUpsertWithoutLogInput = {
    update: XOR<PassCodeUpdateWithoutLogInput, PassCodeUncheckedUpdateWithoutLogInput>
    create: XOR<PassCodeCreateWithoutLogInput, PassCodeUncheckedCreateWithoutLogInput>
    where?: PassCodeWhereInput
  }

  export type PassCodeUpdateToOneWithWhereWithoutLogInput = {
    where?: PassCodeWhereInput
    data: XOR<PassCodeUpdateWithoutLogInput, PassCodeUncheckedUpdateWithoutLogInput>
  }

  export type PassCodeUpdateWithoutLogInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
    worker?: WorkerUpdateOneWithoutPassCodeNestedInput
  }

  export type PassCodeUncheckedUpdateWithoutLogInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workerId?: NullableIntFieldUpdateOperationsInput | number | null
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SubDomainCreateManyWorkerInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    domainId?: number | null
    siteId?: number | null
    prefix: string
  }

  export type LogCreateManyWorkerInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    comment?: string | null
    ip?: string | null
    userAgent?: string | null
    subDomainId?: number | null
    passCodeId?: string | null
  }

  export type PassCodeCreateManyWorkerInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    active?: boolean
  }

  export type SubDomainUpdateWithoutWorkerInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    prefix?: StringFieldUpdateOperationsInput | string
    domain?: DomainUpdateOneWithoutSubdomainsNestedInput
    logs?: LogUpdateManyWithoutSubDomainNestedInput
    site?: SiteUpdateOneWithoutSubDomainNestedInput
  }

  export type SubDomainUncheckedUpdateWithoutWorkerInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    domainId?: NullableIntFieldUpdateOperationsInput | number | null
    siteId?: NullableIntFieldUpdateOperationsInput | number | null
    prefix?: StringFieldUpdateOperationsInput | string
    logs?: LogUncheckedUpdateManyWithoutSubDomainNestedInput
  }

  export type SubDomainUncheckedUpdateManyWithoutWorkerInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    domainId?: NullableIntFieldUpdateOperationsInput | number | null
    siteId?: NullableIntFieldUpdateOperationsInput | number | null
    prefix?: StringFieldUpdateOperationsInput | string
  }

  export type LogUpdateWithoutWorkerInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    subDomain?: SubDomainUpdateOneWithoutLogsNestedInput
    passCode?: PassCodeUpdateOneWithoutLogNestedInput
  }

  export type LogUncheckedUpdateWithoutWorkerInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    subDomainId?: NullableIntFieldUpdateOperationsInput | number | null
    passCodeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LogUncheckedUpdateManyWithoutWorkerInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    subDomainId?: NullableIntFieldUpdateOperationsInput | number | null
    passCodeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PassCodeUpdateWithoutWorkerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
    log?: LogUpdateOneWithoutPassCodeNestedInput
  }

  export type PassCodeUncheckedUpdateWithoutWorkerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
    log?: LogUncheckedUpdateOneWithoutPassCodeNestedInput
  }

  export type PassCodeUncheckedUpdateManyWithoutWorkerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SubDomainCreateManyDomainInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    workerId?: number | null
    siteId?: number | null
    prefix: string
  }

  export type SubDomainUpdateWithoutDomainInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    prefix?: StringFieldUpdateOperationsInput | string
    worker?: WorkerUpdateOneWithoutSubdomainsNestedInput
    logs?: LogUpdateManyWithoutSubDomainNestedInput
    site?: SiteUpdateOneWithoutSubDomainNestedInput
  }

  export type SubDomainUncheckedUpdateWithoutDomainInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workerId?: NullableIntFieldUpdateOperationsInput | number | null
    siteId?: NullableIntFieldUpdateOperationsInput | number | null
    prefix?: StringFieldUpdateOperationsInput | string
    logs?: LogUncheckedUpdateManyWithoutSubDomainNestedInput
  }

  export type SubDomainUncheckedUpdateManyWithoutDomainInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workerId?: NullableIntFieldUpdateOperationsInput | number | null
    siteId?: NullableIntFieldUpdateOperationsInput | number | null
    prefix?: StringFieldUpdateOperationsInput | string
  }

  export type LogCreateManySubDomainInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    comment?: string | null
    ip?: string | null
    userAgent?: string | null
    workerId?: number | null
    passCodeId?: string | null
  }

  export type LogUpdateWithoutSubDomainInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    worker?: WorkerUpdateOneWithoutLogsNestedInput
    passCode?: PassCodeUpdateOneWithoutLogNestedInput
  }

  export type LogUncheckedUpdateWithoutSubDomainInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    workerId?: NullableIntFieldUpdateOperationsInput | number | null
    passCodeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LogUncheckedUpdateManyWithoutSubDomainInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    workerId?: NullableIntFieldUpdateOperationsInput | number | null
    passCodeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SubDomainCreateManySiteInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    workerId?: number | null
    domainId?: number | null
    prefix: string
  }

  export type SubDomainUpdateWithoutSiteInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    prefix?: StringFieldUpdateOperationsInput | string
    worker?: WorkerUpdateOneWithoutSubdomainsNestedInput
    domain?: DomainUpdateOneWithoutSubdomainsNestedInput
    logs?: LogUpdateManyWithoutSubDomainNestedInput
  }

  export type SubDomainUncheckedUpdateWithoutSiteInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workerId?: NullableIntFieldUpdateOperationsInput | number | null
    domainId?: NullableIntFieldUpdateOperationsInput | number | null
    prefix?: StringFieldUpdateOperationsInput | string
    logs?: LogUncheckedUpdateManyWithoutSubDomainNestedInput
  }

  export type SubDomainUncheckedUpdateManyWithoutSiteInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workerId?: NullableIntFieldUpdateOperationsInput | number | null
    domainId?: NullableIntFieldUpdateOperationsInput | number | null
    prefix?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}